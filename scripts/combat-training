#!/usr/bin/env bash

### Test server side rendering of Covalent components inside src/app/universal-app with platform-server and dumps the output to stdout.

# Go to the project root directory
cd $(git rev-parse --show-toplevel)

# Build the @covalent/core package and copy it into node_modules like how any consumer would see and use them.
# This is so we can interact with the latest changes we made locally to any Covalent components and see if any
# new changes made are not compatiable with server side rendering.
rm -rf ./node_modules/@covalent/core
npm run build
cp -r ./deploy/platform/core ./node_modules/@covalent/core

# Compile the combat-training app to generate the ngfactories which are used for rendering our components on the
# server side. We call it the battle zone because we are testing to see if the Covalent component can successfuly
# render on the server side or not. The generated ngfactories created from running this script is this battle zone/environement
# based on Covalent components we arbitrary setup in the combat-training component.
# Helpful Note: When we use the Angular CLI by default without aot setup the Angular compiler ships to the client side and
# creates these ngfactories to run the app client side. If we use the aot setup then the compiler does not ship to the client side
# because the ngfactories are already created ahead of time. This gives a better user experience by providing a faster load time.
$(npm bin)/ngc -p src/universal-app/tsconfig-battle-zone.json

# Run the battle-royale script to inititate the battle and see if we can successfuly run the supplied Covalent components server side.
# If we win the battle the terminal will output HTML that represent Covalent components rendered on the server.
# If we lose the battle changes must be made as reported by the battle results, errors.
$(npm bin)/tsc -p src/universal-app/tsconfig-battle-royale.json
node ./src/universal-app/dist/battle-royale.js

# clear core pseudo installation
rm -rf ./node_modules/@covalent/core

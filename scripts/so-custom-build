#!/usr/bin/env bash

# HACK START - common
  # (Remove in future): used to resolve ng-packagr current lack of support for Intra-package dependencies between entry points && ability to override tsconfig:
  # this hack builds common using ng-packagr to generate @covalent/core/common and puts it into the projects root 'node_modules'
  # https://github.com/dherges/ng-packagr/issues/379 && https://github.com/dherges/ng-packagr/issues/256
  # Reason for hack: we need these missing features because we use '/common' between multiple entry points both primary and secondary
  # and ng-packagr currently doesn't support it. So for now we are going to create/build the package that contains
  # @covalent/core/common just by itself, we will then copy the generated './deploy/platform' that was generated into
  # our projects root './node_modules' and then in the respective modules/components under /core we will replaces '../common/*'
  # with '@covalent/core/common'. Now when we run ng-packagr on the whole /core suit when it see's '@covalent/core/common' it will
  # take it from our root's './node_modules' instead of trying to find its intra-package dependency '../common' like before (which is
  # not there because of ng-packagr build alogrithm changing the filepath). So this hack resolve
  # the issue for ng-packagr but it bring up an issue when trying to serve the app with 'npm run serve'
  # we also had to add inside the roots tsconfig.json a new path for the core's secondary entrypoints '"@covalent/core/*": ["./platform/core/*"],'
  # because we are not using a relative path anymore '../common'.

rm -rf ./node_modules/@covalent/core
echo 'Creating @covalent/core/common secondary entrypoint hack'
cd ./src/platform/core
rm -rf .td_build_common
mkdir .td_build_common
# move files to build only '@covalent/core/common' into its own build station to not cause other secondary entry points to build
cp -r ./common .td_build_common/
cp ng-package.json .td_build_common/
cd .td_build_common

# create necessary files for building @covalent/core/common
echo '{ "name": "@covalent/core" }' > package.json
echo "export * from './common';" > public-api.ts

# regex replace as needed for specific build of @covalent/core/common
sed -i '' 's/..\/..\/..\/deploy\/platform/.\/deploy\/platform/' ng-package.json
../../../../node_modules/.bin/ng-packagr -p ng-package.json

# move completed build over to root node_modules as @covalent/core/*
cp -r ./deploy/platform/core ../../../../node_modules/@covalent/

# kill build station don't need it anymore
rm -rf ../.td_build_common
cd ../../../..
echo 'Completed @covalent/core/common secondary entrypoint hack'
# HACK END - common

rm -rf ./deploy
# Steps to package '@covalent/core' and it's children '@covalent/core/*'
echo 'Creating @covalent/core @covalent/core/* build'
./node_modules/.bin/ng-packagr -p src/platform/core/ng-package.json
# move over styles manually ng-packagr doesn't do it automatically
echo 'Building and moving @covalent/core sass/css'
cp -r ./src/platform/core/common/styles ./deploy/platform/core/common
cp ./src/platform/core/common/_common-theme.scss ./deploy/platform/core/common
cp ./src/platform/core/common/material-icons.scss ./deploy/platform/core/common
cp ./src/platform/core/common/platform.scss ./deploy/platform/core/common
gulp compile-common-sass
echo 'Completed building and moving @covalent/core sass/css'

# HACK (Remove in future): remove remnants of @covalent/core/common see script/ng-packagr-common for details
rm -rf ./node_modules/@covalent/core
echo 'Completed @covalent/core @covalent/core/* build'

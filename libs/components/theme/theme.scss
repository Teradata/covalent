@use '@covalent/tokens/index.scss' as tokens;
@use '../src/icon/icon' as icon;
@use '../src/skeleton/skeleton.styles' as skeleton; // TODO - should be a component for text and block
@use './mixins' as theme;
@import '../../icons/covalent-icons.css';

@include icon.core-styles(); // TODO - include future support in icons css
@include skeleton.core-styles(); // TODO - should include support

$theme-tokens: map-get(tokens.$tokens, 'theme');
$light-tokens: map-get($theme-tokens, 'light');
$light-colors: map-get($light-tokens, 'colors');
$dark-tokens: map-get($theme-tokens, 'dark');
$dark-colors: map-get($dark-tokens, 'colors');

$merged: map-merge($light-colors, map-get(tokens.$tokens, light));
// Define the base theme using light tokens w/ dark tokens overriting for prefers-color-scheme:dark
:root {
  @include theme.components-theme(
    map-merge($light-colors, map-get(tokens.$tokens, light)),
    map-get(tokens.$tokens, typography)
  );

  @media (prefers-color-scheme: dark) {
    @include theme.components-theme(
      map-merge($dark-colors, map-get(tokens.$tokens, dark)),
      map-get(tokens.$tokens, typography)
    );
  }
}

// For convience re-define theme tokens scoped to a light/dark class
.light {
  @include theme.components-theme(
    map-merge($light-colors, map-get(tokens.$tokens, light)),
    map-get(tokens.$tokens, typography)
  );
}

.dark {
  @include theme.components-theme(
    map-merge($dark-colors, map-get(tokens.$tokens, dark)),
    map-get(tokens.$tokens, typography)
  );
}

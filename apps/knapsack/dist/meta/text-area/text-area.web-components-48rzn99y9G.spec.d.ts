/**
 * patternId: "text-area" templateId: "web-components-48rzn99y9G"
 * This file was automatically generated by Knapsack.
 * DO NOT MODIFY IT BY HAND.
 * Instead, adjust it's spec, by either:
 * 1) go to "/patterns/text-area/web-components-48rzn99y9G" and use the UI to edit the spec
 * 2) OR edit the "knapsack.pattern.text-area.json" file's "spec.props".
 * Run Knapsack again to regenerate this file.
 */

export interface TextArea {
  /**
   * Sets number of visible text lines.
   */
  rows?: number;
  /**
   * Sets the visible width of the textarea.
   */
  cols?: number;
  /**
   * The input control's value.
   */
  value?: string;
  /**
   * A string specifying the type of control to render.
   */
  type?:
    | 'text'
    | 'search'
    | 'tel'
    | 'url'
    | 'email'
    | 'password'
    | 'date'
    | 'month'
    | 'week'
    | 'time'
    | 'datetime-local'
    | 'number'
    | 'color';
  /**
   * Sets floating label value.
   */
  label?: string;
  /**
   * Sets the name attribute on the internal textarea.
   */
  name?: string;
  /**
   * Sets disappearing input placeholder.
   */
  placeholder?: string;
  /**
   * Helper text to display below the input. Display default only when focused.
   */
  helper?: string;
  /**
   * Always show the helper text despite focus.
   */
  helperPersistent?: boolean;
  /**
   * Whether or not to show the material outlined variant.
   */
  outlined?: boolean;
  /**
   * Displays error state if value is empty and input is blurred.
   */
  required?: boolean;
  /**
   * Whether or not the input should be disabled.
   */
  disabled?: boolean;
  /**
   * Leading icon to display in input. See cv-icon.
   */
  icon?: string;
  /**
   * Trailing icon to display in input. See cv-icon.
   */
  iconTrailing?: string;
  /**
   * Maximum length input to accept.
   */
  maxLength?: number;
  /**
   * Note: requires maxLength to be set. Display character counter with max length.
   */
  charCounter?: boolean;
  /**
   * Message to show in the error color when the textarea is invalid. (Helper text will not be visible)
   */
  validationMessage?: string;
  /**
   * The ValidityState of the textfield. (Read only)
   */
  validityState?: {
    [k: string]: any;
  };
  /**
   * HTMLInputElement.prototype.willValidate (Read only)
   */
  willValidate?: {
    [k: string]: any;
  };
  /**
   * Callback called before each validation check.
   */
  validityTransform?: {
    [k: string]: any;
  };
  /**
   * Runs validation check on initial render.
   */
  validateOnInitialRender?: boolean;
}

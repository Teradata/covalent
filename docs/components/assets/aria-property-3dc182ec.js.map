{"version":3,"file":"aria-property-3dc182ec.js","sources":["../../../../node_modules/@material/mwc-base/aria-property.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * TypeScript version of the decorator\n * @see https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators\n */\nfunction tsDecorator(prototype, name, descriptor) {\n    const constructor = prototype.constructor;\n    if (!descriptor) {\n        /**\n         * lit uses internal properties with two leading underscores to\n         * provide storage for accessors\n         */\n        const litInternalPropertyKey = `__${name}`;\n        descriptor =\n            constructor.getPropertyDescriptor(name, litInternalPropertyKey);\n        if (!descriptor) {\n            throw new Error('@ariaProperty must be used after a @property decorator');\n        }\n    }\n    // descriptor must exist at this point, reassign so typescript understands\n    const propDescriptor = descriptor;\n    let attribute = '';\n    if (!propDescriptor.set) {\n        throw new Error(`@ariaProperty requires a setter for ${name}`);\n    }\n    // TODO(b/202853219): Remove this check when internal tooling is\n    // compatible\n    // tslint:disable-next-line:no-any bail if applied to internal generated class\n    if (prototype.dispatchWizEvent) {\n        return descriptor;\n    }\n    const wrappedDescriptor = {\n        configurable: true,\n        enumerable: true,\n        set(value) {\n            if (attribute === '') {\n                const options = constructor.getPropertyOptions(name);\n                // if attribute is not a string, use `name` instead\n                attribute =\n                    typeof options.attribute === 'string' ? options.attribute : name;\n            }\n            if (this.hasAttribute(attribute)) {\n                this.removeAttribute(attribute);\n            }\n            propDescriptor.set.call(this, value);\n        }\n    };\n    if (propDescriptor.get) {\n        wrappedDescriptor.get = function () {\n            return propDescriptor.get.call(this);\n        };\n    }\n    return wrappedDescriptor;\n}\n/**\n * A property decorator proxies an aria attribute to an internal node\n *\n * This decorator is only intended for use with ARIA attributes, such as `role`\n * and `aria-label` due to screenreader needs.\n *\n * Upon first render, `@ariaProperty` will remove the attribute from the host\n * element to prevent screenreaders from reading the host instead of the\n * internal node.\n *\n * This decorator should only be used for non-Symbol public fields decorated\n * with `@property`, or on a setter with an optional getter.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @ariaProperty\n *   @property({ type: String, attribute: 'aria-label' })\n *   ariaLabel!: string;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function ariaProperty(protoOrDescriptor, name, \n// tslint:disable-next-line:no-any any is required as a return type from decorators\ndescriptor) {\n    if (name !== undefined) {\n        return tsDecorator(protoOrDescriptor, name, descriptor);\n    }\n    else {\n        throw new Error('@ariaProperty only supports TypeScript Decorators');\n    }\n}\n//# sourceMappingURL=aria-property.js.map"],"names":["tsDecorator","prototype","name","descriptor","constructor","litInternalPropertyKey","propDescriptor","attribute","wrappedDescriptor","value","options","ariaProperty","protoOrDescriptor"],"mappings":"AAAA;AAAA;AAAA;AAAA;AAAA,GASA,SAASA,EAAYC,EAAWC,EAAMC,EAAY,CAC9C,MAAMC,EAAcH,EAAU,YAC9B,GAAI,CAACE,EAAY,CAKb,MAAME,EAAyB,KAAKH,CAAI,GAGxC,GAFAC,EACIC,EAAY,sBAAsBF,EAAMG,CAAsB,EAC9D,CAACF,EACD,MAAM,IAAI,MAAM,wDAAwD,CAE/E,CAED,MAAMG,EAAiBH,EACvB,IAAII,EAAY,GAChB,GAAI,CAACD,EAAe,IAChB,MAAM,IAAI,MAAM,uCAAuCJ,CAAI,EAAE,EAKjE,GAAID,EAAU,iBACV,OAAOE,EAEX,MAAMK,EAAoB,CACtB,aAAc,GACd,WAAY,GACZ,IAAIC,EAAO,CACP,GAAIF,IAAc,GAAI,CAClB,MAAMG,EAAUN,EAAY,mBAAmBF,CAAI,EAEnDK,EACI,OAAOG,EAAQ,WAAc,SAAWA,EAAQ,UAAYR,CACnE,CACG,KAAK,aAAaK,CAAS,GAC3B,KAAK,gBAAgBA,CAAS,EAElCD,EAAe,IAAI,KAAK,KAAMG,CAAK,CACtC,CACT,EACI,OAAIH,EAAe,MACfE,EAAkB,IAAM,UAAY,CAChC,OAAOF,EAAe,IAAI,KAAK,IAAI,CAC/C,GAEWE,CACX,CAyBO,SAASG,EAAaC,EAAmBV,EAEhDC,EAAY,CACR,GAAID,IAAS,OACT,OAAOF,EAAYY,EAAmBV,EAAMC,CAAU,EAGtD,MAAM,IAAI,MAAM,mDAAmD,CAE3E","x_google_ignoreList":[0]}
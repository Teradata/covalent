{"version":3,"file":"chips.stories-1402e7af.js","sources":["../../../../libs/components/src/chips/chip-base.ts","../../../../libs/components/src/chips/chip.ts","../../../../node_modules/@material/dom/announce.js","../../../../libs/components/src/chips/chip-set-base.ts","../../../../libs/components/src/chips/chip-set.ts"],"sourcesContent":["import { addHasRemoveClass } from '@material/mwc-base';\nimport { MDCChipFoundation } from '@material/chips/chip/foundation';\nimport {\n  MDCChipAttributes,\n  MDCChipCssClasses,\n  MDCChipEvents,\n  MDCChipAnimation,\n} from '@material/chips/chip/constants';\nimport { MDCChipAction, MDCChipActionEvents } from '@material/chips/action';\nimport {\n  MDCChipActionFocusBehavior,\n  MDCChipActionType,\n} from '@material/chips/action/constants';\nimport { MDCChipAdapter } from '@material/chips/chip/adapter';\nimport { property, query } from 'lit/decorators.js';\nimport { html, LitElement } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\n\nlet tdChipsId = 0;\n\nexport class ChipBase extends LitElement {\n  protected mdcFoundation?: MDCChipFoundation;\n  protected readonly mdcFoundationClass = MDCChipFoundation;\n  protected actions!: Map<MDCChipActionType, MDCChipAction>;\n  protected chipId!: number;\n\n  @query('.mdc-evolution-chip') protected mdcRoot!: HTMLElement;\n\n  /**\n   * The text label of the chip\n   */\n  @property()\n  label = '';\n\n  /**\n   * The icon name to use for primary or leading chip\n   */\n  @property({ type: String }) icon = '';\n\n  @property({ type: Boolean, reflect: true }) trailingIcon = false;\n\n  @property({ type: Boolean, reflect: true }) avatar = false;\n\n  /**\n   * The text label of the chip\n   */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /**\n   * Set the filter chip varient\n   */\n  @property({ type: Boolean, reflect: true }) filter = false;\n\n  /**\n   * The state representation secondary|negative|positive|caution\n   */\n  @property()\n  state?: 'secondary' | 'negative' | 'positive' | 'caution';\n\n  constructor() {\n    super();\n    this.chipId = tdChipsId++;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-evolution-chip': true,\n      'mdc-evolution-chip--disabled': this.disabled,\n      'mdc-evolution-chip--with-trailing-action': this.trailingIcon,\n      'mdc-evolution-chip--with-primary-graphic':\n        !this.trailingIcon && this.icon,\n      'mdc-evolution-chip--with-primary-icon': this.icon && !this.filter,\n      'mdc-evolution-chip--filter': this.filter,\n      'mdc-evolution-chip--selectable': this.filter,\n      'mdc-evolution-chip--with-avatar': this.avatar,\n      secondary: this.state === 'secondary',\n      negative: this.state === 'negative',\n      caution: this.state === 'caution',\n    };\n    return html`\n      <span\n        class=\"${classMap(classes)}\"\n        role=\"${this.filter ? 'presentation' : 'row'}\"\n        id=\"cv-chip-${this.chipId}\"\n      >\n        <span\n          class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--primary\"\n          role=\"${this.filter ? 'presentation' : 'gridcell'}\"\n        >\n          <button\n            class=\"mdc-evolution-chip__action mdc-evolution-chip__action--primary\"\n            role=\"${this.filter ? 'option' : ''}\"\n            type=\"button\"\n            tabindex=\"-1\"\n          >\n            <span\n              class=\"mdc-evolution-chip__ripple mdc-evolution-chip__ripple--primary\"\n            ></span>\n            ${(!this.trailingIcon && this.icon) || this.filter\n              ? this.renderGraphic()\n              : ''}\n            <span class=\"mdc-evolution-chip__text-label\">${this.label}</span>\n          </button>\n        </span>\n        ${this.trailingIcon ? this.renderTrailing() : ''}\n      </span>\n    `;\n  }\n\n  protected override async firstUpdated() {\n    if (this.mdcFoundation !== undefined) {\n      this.mdcFoundation.destroy();\n    }\n    this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());\n\n    this.actions = new Map();\n    const actionEls = this.mdcRoot.querySelectorAll(\n      '.mdc-evolution-chip__action'\n    );\n    for (let i = 0; i < actionEls.length; i++) {\n      const action = new MDCChipAction(actionEls[i] as HTMLElement);\n      this.actions.set(action.actionType(), action);\n      actionEls[i].addEventListener(\n        MDCChipActionEvents.INTERACTION,\n        (event) => {\n          this.mdcFoundation?.handleActionInteraction(event as any);\n        }\n      );\n      actionEls[i].addEventListener(MDCChipActionEvents.NAVIGATION, (event) => {\n        this.mdcFoundation?.handleActionNavigation(event as any);\n      });\n    }\n  }\n\n  protected renderGraphic() {\n    const graphicContent = this.filter\n      ? this.renderCheckMark()\n      : this.renderIcon();\n    return html`<span class=\"mdc-evolution-chip__graphic\">\n      ${graphicContent}\n    </span>`;\n  }\n\n  protected renderCheckMark() {\n    return html` <span class=\"mdc-evolution-chip__checkmark\">\n      <svg class=\"mdc-evolution-chip__checkmark-svg\" viewBox=\"-2 -3 30 30\">\n        <path\n          class=\"mdc-evolution-chip__checkmark-path\"\n          fill=\"none\"\n          d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"\n        />\n      </svg>\n    </span>`;\n  }\n\n  protected renderIcon(trailing = false) {\n    return html` <span\n      class=\"mdc-evolution-chip__icon mdc-evolution-chip__icon--${trailing\n        ? 'trailing'\n        : 'primary'}\"\n    >\n      ${this.icon}\n    </span>`;\n  }\n\n  protected renderTrailing() {\n    return html` <span\n      class=\"mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing\"\n      role=\"gridcell\"\n    >\n      <button\n        class=\"mdc-evolution-chip__action mdc-evolution-chip__action--trailing\"\n        type=\"button\"\n        tabindex=\"-1\"\n        data-mdc-deletable=\"true\"\n        aria-label=\"Remove ${this.label}\"\n      >\n        <span\n          class=\"mdc-evolution-chip__ripple mdc-evolution-chip__ripple--trailing\"\n        ></span>\n        ${this.renderIcon(true)}\n      </button>\n    </span>`;\n  }\n\n  protected createAdapter(): MDCChipAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      emitEvent: <D extends object>(eventName: MDCChipEvents, eventDetail: D) =>\n        this.dispatchEvent(\n          new CustomEvent(eventName, { bubbles: true, detail: eventDetail })\n        ),\n      /** Returns the child actions provided by the chip. */\n      getActions: () => {\n        const actions: MDCChipActionType[] = [];\n        for (const [key] of this.actions) {\n          actions.push(key);\n        }\n        return actions;\n      },\n      /** Returns the value for the given attribute, if it exists. */\n      getAttribute: (attrName: MDCChipAttributes) =>\n        this.mdcRoot.getAttribute(attrName),\n      /** Returns the ID of the root element. */\n      getElementID: () => this.mdcRoot.getAttribute('id') ?? '',\n      /** Returns the offset width of the root element. */\n      getOffsetWidth: () => this.mdcRoot.offsetWidth,\n      /** Returns true if the root element has the given class. */\n      hasClass: (className: MDCChipCssClasses) =>\n        this.mdcRoot.classList.contains(className),\n      /** Proxies to the MDCChipAction#isSelectable method. */\n      isActionSelectable: (action: MDCChipActionType) =>\n        this.actions.get(action)?.isSelectable() ?? true,\n      /** Proxies to the MDCChipAction#isSelected method. */\n      isActionSelected: (action: MDCChipActionType) =>\n        this.actions.get(action)?.isSelected() ?? false,\n      /** Proxies to the MDCChipAction#isFocusable method. */\n      isActionFocusable: (action: MDCChipActionType) =>\n        this.actions.get(action)?.isFocusable() ?? true,\n      /** Proxies to the MDCChipAction#isDisabled method. */\n      isActionDisabled: (action: MDCChipActionType) =>\n        this.actions.get(action)?.isDisabled() ?? false,\n      /** Returns true if the text direction is right-to-left. */\n      isRTL: () =>\n        window.getComputedStyle(this.mdcRoot).getPropertyValue('direction') ===\n        'rtl',\n      /** Proxies to the MDCChipAction#setDisabled method. */\n      setActionDisabled: (action: MDCChipActionType, isDisabled: boolean) =>\n        this.actions.get(action)?.setDisabled(isDisabled),\n      /** Proxies to the MDCChipAction#setFocus method. */\n      setActionFocus: (\n        action: MDCChipActionType,\n        behavior: MDCChipActionFocusBehavior\n      ) => this.actions.get(action)?.setFocus(behavior),\n      /** Proxies to the MDCChipAction#setSelected method. */\n      setActionSelected: (action: MDCChipActionType, isSelected: boolean) =>\n        this.actions.get(action)?.setSelected(isSelected),\n      /** Sets the style property to the given value. */\n      setStyleProperty: (property: string, value: string) =>\n        this.mdcRoot.style.setProperty(property, value),\n    };\n  }\n\n  getActions() {\n    return this.mdcFoundation?.getActions() ?? [];\n  }\n\n  getElementID() {\n    return this.mdcFoundation?.getElementID() ?? '';\n  }\n\n  isActionFocusable(action: MDCChipActionType) {\n    return this.mdcFoundation?.isActionFocusable(action) ?? false;\n  }\n\n  isActionSelectable(action: MDCChipActionType) {\n    return this.mdcFoundation?.isActionSelectable(action) ?? false;\n  }\n\n  isActionSelected(action: MDCChipActionType) {\n    return this.mdcFoundation?.isActionSelected(action) ?? false;\n  }\n\n  setActionFocus(action: MDCChipActionType, focus: MDCChipActionFocusBehavior) {\n    return this.mdcFoundation?.setActionFocus(action, focus);\n  }\n\n  setActionSelected(actionType: MDCChipActionType, isSelected: boolean) {\n    return this.mdcFoundation?.setActionSelected(actionType, isSelected);\n  }\n\n  startAnimation(animation: MDCChipAnimation) {\n    return this.mdcFoundation?.startAnimation(animation);\n  }\n}\n","import { css, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { ChipBase } from './chip-base';\nimport styles from './chip.scss?inline';\n\n/**\n * Action ribbon\n *\n * @slot - This element has a slot\n */\n@customElement('cv-chip')\nexport class CovalentChip extends ChipBase {\n  static override styles = [\n    css`\n      ${unsafeCSS(styles)}\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cv-chip': CovalentChip;\n  }\n}\n\nexport default CovalentChip;\n","/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/**\n * Priorities for the announce function.\n */\nexport var AnnouncerPriority;\n(function (AnnouncerPriority) {\n    AnnouncerPriority[\"POLITE\"] = \"polite\";\n    AnnouncerPriority[\"ASSERTIVE\"] = \"assertive\";\n})(AnnouncerPriority || (AnnouncerPriority = {}));\n/**\n * Data attribute added to live region element.\n */\nexport var DATA_MDC_DOM_ANNOUNCE = 'data-mdc-dom-announce';\n/**\n * Announces the given message with optional priority, defaulting to \"polite\"\n */\nexport function announce(message, options) {\n    Announcer.getInstance().say(message, options);\n}\nvar Announcer = /** @class */ (function () {\n    // Constructor made private to ensure only the singleton is used\n    function Announcer() {\n        this.liveRegions = new Map();\n    }\n    Announcer.getInstance = function () {\n        if (!Announcer.instance) {\n            Announcer.instance = new Announcer();\n        }\n        return Announcer.instance;\n    };\n    Announcer.prototype.say = function (message, options) {\n        var _a, _b;\n        var priority = (_a = options === null || options === void 0 ? void 0 : options.priority) !== null && _a !== void 0 ? _a : AnnouncerPriority.POLITE;\n        var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;\n        var liveRegion = this.getLiveRegion(priority, ownerDocument);\n        // Reset the region to pick up the message, even if the message is the\n        // exact same as before.\n        liveRegion.textContent = '';\n        // Timeout is necessary for screen readers like NVDA and VoiceOver.\n        setTimeout(function () {\n            liveRegion.textContent = message;\n            ownerDocument.addEventListener('click', clearLiveRegion);\n        }, 1);\n        function clearLiveRegion() {\n            liveRegion.textContent = '';\n            ownerDocument.removeEventListener('click', clearLiveRegion);\n        }\n    };\n    Announcer.prototype.getLiveRegion = function (priority, ownerDocument) {\n        var documentLiveRegions = this.liveRegions.get(ownerDocument);\n        if (!documentLiveRegions) {\n            documentLiveRegions = new Map();\n            this.liveRegions.set(ownerDocument, documentLiveRegions);\n        }\n        var existingLiveRegion = documentLiveRegions.get(priority);\n        if (existingLiveRegion && ownerDocument.body.contains(existingLiveRegion)) {\n            return existingLiveRegion;\n        }\n        var liveRegion = this.createLiveRegion(priority, ownerDocument);\n        documentLiveRegions.set(priority, liveRegion);\n        return liveRegion;\n    };\n    Announcer.prototype.createLiveRegion = function (priority, ownerDocument) {\n        var el = ownerDocument.createElement('div');\n        el.style.position = 'absolute';\n        el.style.top = '-9999px';\n        el.style.left = '-9999px';\n        el.style.height = '1px';\n        el.style.overflow = 'hidden';\n        el.setAttribute('aria-atomic', 'true');\n        el.setAttribute('aria-live', priority);\n        el.setAttribute(DATA_MDC_DOM_ANNOUNCE, 'true');\n        ownerDocument.body.appendChild(el);\n        return el;\n    };\n    return Announcer;\n}());\n//# sourceMappingURL=announce.js.map","import { MDCChipSetAdapter } from '@material/chips/chip-set/adapter';\nimport {\n  MDCChipSetAttributes,\n  MDCChipSetEvents,\n} from '@material/chips/chip-set/constants';\nimport { MDCChipEvents } from '@material/chips/chip/constants';\nimport {\n  MDCChipActionType,\n  MDCChipActionFocusBehavior,\n} from '@material/chips/action/constants';\nimport { MDCChipAnimation } from '@material/chips/chip/constants';\nimport {\n  ChipAnimationEvent,\n  ChipInteractionEvent,\n  ChipNavigationEvent,\n} from '@material/chips/chip-set/types';\nimport { MDCChipSetFoundation } from '@material/chips/chip-set/foundation';\nimport { announce } from '@material/dom/announce';\nimport { property, query } from 'lit/decorators.js';\nimport { html, LitElement, PropertyValues } from 'lit';\nimport { CovalentChip } from './chip';\n\nexport class ChipSetBase extends LitElement {\n  protected mdcFoundation!: MDCChipSetFoundation;\n\n  @query('.mdc-evolution-chip-set') protected mdcRoot!: HTMLElement;\n\n  /**\n   * Set if the chips are selectable/actionable\n   */\n  @property({ type: Boolean, reflect: true }) selectable = false;\n\n  /**\n   * Set the chips are mulit-selectable\n   */\n  @property({ type: Boolean, reflect: true }) multi = false;\n\n  /**\n   * The arial label for the the chip set\n   */\n  @property()\n  label = '';\n\n  @property({ type: Number }) activeIndex = 0;\n\n  protected _previousActiveIndex = -1;\n\n  protected chips: CovalentChip[] = [];\n\n  override render() {\n    return html`<span\n      class=\"mdc-evolution-chip-set\"\n      role=\"${this.selectable || this.multi ? 'listbox' : 'grid'}\"\n      aria-label=\"${this.label}\"\n      aria-multiselectable=\"${this.multi}\"\n    >\n      <span class=\"mdc-evolution-chip-set__chips\" role=\"presentation\">\n        <slot></slot>\n      </span>\n    </span>`;\n  }\n\n  protected override async updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    await this.updateComplete;\n    if (this.activeIndex != this._previousActiveIndex) {\n      this.mdcFoundation.setChipSelected(\n        this.activeIndex,\n        MDCChipActionType.PRIMARY,\n        true\n      );\n    }\n  }\n\n  protected override firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    const slot = this.shadowRoot?.querySelector('slot');\n    const chipEls =\n      slot?.assignedElements().filter((node) => node instanceof CovalentChip) ??\n      [];\n\n    for (let i = 0; i < chipEls.length; i++) {\n      const chip = chipEls[i] as CovalentChip;\n      this.chips.push(chip);\n    }\n\n    if (this.mdcFoundation !== undefined) {\n      this.mdcFoundation.destroy();\n    }\n    this.mdcFoundation = new MDCChipSetFoundation(this.createAdapter());\n    this.mdcFoundation.init();\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this.addEventListener(MDCChipEvents.ANIMATION, this._handleChipAnimation);\n    this.addEventListener(\n      MDCChipEvents.INTERACTION,\n      this._handleChipInteraction\n    );\n    this.addEventListener(MDCChipEvents.NAVIGATION, this._handleChipNavigation);\n  }\n\n  override disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.removeEventListener(\n      MDCChipEvents.ANIMATION,\n      this._handleChipAnimation\n    );\n    this.removeEventListener(\n      MDCChipEvents.INTERACTION,\n      this._handleChipInteraction\n    );\n    this.removeEventListener(\n      MDCChipEvents.NAVIGATION,\n      this._handleChipNavigation\n    );\n  }\n\n  protected createAdapter(): MDCChipSetAdapter {\n    return {\n      /** Announces the message via an aria-live region */\n      announceMessage: announce,\n      /** Emits the given event with the given detail. */\n      emitEvent: <D extends object>(\n        eventName: MDCChipSetEvents,\n        eventDetail: D\n      ) =>\n        this.dispatchEvent(\n          new CustomEvent(eventName, { bubbles: true, detail: eventDetail })\n        ),\n      /** Returns the value for the given attribute, if it exists. */\n      getAttribute: (attrName: MDCChipSetAttributes) =>\n        this.mdcRoot.getAttribute(attrName),\n      /** Returns the actions provided by the child chip at the given index. */\n      getChipActionsAtIndex: (index: number) => this.chips[index].getActions(),\n      /** Returns the number of child chips. */\n      getChipCount: () => this.chips.length,\n      /** Returns the ID of the chip at the given index. */\n      getChipIdAtIndex: (index: number) => this.chips[index].getElementID(),\n      /** Returns the index of the child chip with the matching ID. */\n      getChipIndexById: (chipID: string) =>\n        this.chips.findIndex((chip) => chip.getElementID() === chipID),\n      /** Proxies to the MDCChip#isActionFocusable method. */\n      isChipFocusableAtIndex: (index: number, actionType: MDCChipActionType) =>\n        this.chips[index].isActionFocusable(actionType),\n      /** Proxies to the MDCChip#isActionSelectable method. */\n      isChipSelectableAtIndex: (index: number, actionType: MDCChipActionType) =>\n        this.chips[index].isActionSelectable(actionType),\n      /** Proxies to the MDCChip#isActionSelected method. */\n      isChipSelectedAtIndex: (index: number, actionType: MDCChipActionType) =>\n        this.chips[index].isActionSelected(actionType),\n      /** Removes the chip at the given index. */\n      removeChipAtIndex: (index: number) => this.chips[index].remove(),\n      /** Proxies to the MDCChip#setActionFocus method. */\n      setChipFocusAtIndex: (\n        index: number,\n        action: MDCChipActionType,\n        focus: MDCChipActionFocusBehavior\n      ) => this.chips[index].setActionFocus(action, focus),\n      /** Proxies to the MDCChip#setActionSelected method. */\n      setChipSelectedAtIndex: (\n        index: number,\n        actionType: MDCChipActionType,\n        isSelected: boolean\n      ) => this.chips[index].setActionSelected(actionType, isSelected),\n      /** Starts the chip animation at the given index. */\n      startChipAnimationAtIndex: (index: number, animation: MDCChipAnimation) =>\n        this.chips[index].startAnimation(animation),\n    };\n  }\n\n  private _handleChipAnimation(event: Event): void {\n    this.mdcFoundation.handleChipAnimation(event as ChipAnimationEvent);\n  }\n\n  private _handleChipInteraction(event: Event): void {\n    this.mdcFoundation.handleChipInteraction(event as ChipInteractionEvent);\n  }\n\n  private _handleChipNavigation(event: Event): void {\n    this.mdcFoundation.handleChipNavigation(event as ChipNavigationEvent);\n  }\n}\n","import { css, unsafeCSS } from 'lit';\nimport { customElement } from 'lit/decorators.js';\nimport { ChipSetBase } from './chip-set-base';\nimport styles from './chip-set.scss?inline';\n\n/**\n * Action ribbon\n *\n * @slot - This element has a slot\n */\n@customElement('cv-chip-set')\nexport class CovalentChipSet extends ChipSetBase {\n  static override styles = [\n    css`\n      ${unsafeCSS(styles)}\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cv-chip-set': CovalentChipSet;\n  }\n}\n\n\nexport default CovalentChipSet;\n"],"names":["tdChipsId","ChipBase","LitElement","MDCChipFoundation","classes","html","classMap","actionEls","i","action","MDCChipAction","MDCChipActionEvents","event","_a","graphicContent","trailing","addHasRemoveClass","eventName","eventDetail","actions","key","attrName","className","isDisabled","behavior","isSelected","property","value","focus","actionType","animation","__decorateClass","query","CovalentChip","css","unsafeCSS","styles","customElement","AnnouncerPriority","DATA_MDC_DOM_ANNOUNCE","announce","message","options","Announcer","_b","priority","ownerDocument","liveRegion","clearLiveRegion","documentLiveRegions","existingLiveRegion","el","ChipSetBase","changedProps","MDCChipActionType","slot","chipEls","node","chip","MDCChipSetFoundation","MDCChipEvents","index","chipID","CovalentChipSet"],"mappings":"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","x_google_ignoreList":[2]}
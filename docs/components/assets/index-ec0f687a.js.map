{"version":3,"file":"index-ec0f687a.js","sources":["../../../../node_modules/safevalues/internals/secrets.mjs","../../../../node_modules/safevalues/internals/attribute_impl.mjs","../../../../node_modules/safevalues/builders/attribute_builders.mjs","../../../../node_modules/safevalues/internals/trusted_types.mjs","../../../../node_modules/safevalues/internals/html_impl.mjs","../../../../node_modules/safevalues/internals/resource_url_impl.mjs","../../../../node_modules/safevalues/internals/script_impl.mjs","../../../../node_modules/safevalues/builders/html_builders.mjs","../../../../node_modules/safevalues/builders/url_sanitizer.mjs","../../../../node_modules/safevalues/internals/style_impl.mjs","../../../../node_modules/safevalues/dom/elements/element.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/inert_fragment.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/no_clobber.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/sanitizer_table/sanitizer_table.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/sanitizer_table/default_sanitizer_table.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/html_sanitizer.mjs","../../../../node_modules/safevalues/builders/html_sanitizer/html_sanitizer_builder.mjs","../../../../node_modules/safevalues/builders/resource_url_builders.mjs","../../../../node_modules/safevalues/builders/script_builders.mjs","../../../../node_modules/safevalues/builders/style_builders.mjs","../../../../node_modules/safevalues/internals/style_sheet_impl.mjs","../../../../node_modules/safevalues/builders/style_sheet_builders.mjs","../../../../node_modules/safevalues/index.js"],"sourcesContent":["/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A secret token that must be passed to safe type constructors. It is only\n * accessible from within safevalues, ensuring that unrestricted safe type\n * creation is only possible within safevalues. In particular, this prevents\n * forgery such as `safeHtmlValue.constructor('javascript:evil')`.\n */\nexport const secretToken = {};\n/**\n * Asserts that the given token matches the secret safevalues token. An\n * exception is thrown if that is not the case.\n */\nexport function ensureTokenIsValid(token) {\n    if (token !== secretToken) {\n        throw new Error('Bad secret');\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\n/** A prefix with which an attribute is safe to set using plain strings. */\nexport class SafeAttributePrefix {\n    // @ts-ignore: error TS6133: 'brand' is declared but its value is never read.\n    brand; // To prevent structural typing.\n}\n/** Implementation for `SafeAttributePrefix` */\nclass AttributePrefixImpl extends SafeAttributePrefix {\n    privateDoNotAccessOrElseWrappedAttrPrefix;\n    constructor(attrPrefix, token) {\n        super();\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedAttrPrefix = attrPrefix;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedAttrPrefix;\n    }\n}\n/**\n * Builds a new `SafeAttribute` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createAttributePrefix(attrPrefix) {\n    return new AttributePrefixImpl(attrPrefix, secretToken);\n}\n/**\n * Returns the string value of the passed `SafeAttributePrefix` object while\n * ensuring it has the correct type.\n */\nexport function unwrapAttributePrefix(value) {\n    if (value instanceof AttributePrefixImpl) {\n        return value.privateDoNotAccessOrElseWrappedAttrPrefix;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeAttributePrefix';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { createAttributePrefix } from '../internals/attribute_impl';\nimport { assertIsTemplateObject } from '../internals/string_literal';\nimport { SECURITY_SENSITIVE_ATTRIBUTES } from './sensitive_attributes';\n/**\n * Creates a SafeAttributePrefix object from a template literal with no\n * interpolations for attributes that share a common prefix guaranteed to be not\n * security sensitive.\n *\n * The template literal is a prefix that makes it obvious this attribute is not\n * security sensitive. If it doesn't, this function will throw.\n */\nexport function safeAttrPrefix(templ) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templ, true, 'safeAttr is a template literal tag function ' +\n            'and should be called using the tagged template syntax. ' +\n            'For example, safeAttr`foo`;');\n    }\n    const attrPrefix = templ[0].toLowerCase();\n    if (process.env.NODE_ENV !== 'production') {\n        if (attrPrefix.indexOf('on') === 0 || 'on'.indexOf(attrPrefix) === 0) {\n            throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +\n                `to be safe as it is also a prefix for event handler attributes` +\n                `Please use 'addEventListener' to set event handlers.`);\n        }\n        SECURITY_SENSITIVE_ATTRIBUTES.forEach(sensitiveAttr => {\n            if (sensitiveAttr.indexOf(attrPrefix) === 0) {\n                throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +\n                    `to be safe as it is also a prefix for ` +\n                    `the security sensitive attribute '${sensitiveAttr}'. ` +\n                    `Please use native or safe DOM APIs to set the attribute.`);\n            }\n        });\n    }\n    return createAttributePrefix(attrPrefix);\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * The name of the Trusted Types policy used by TS safevalues, or empty\n * to disable Trusted Types. This duplicates the 'google#safe', but\n * can be overridden in tests.\n */\nlet trustedTypesPolicyName = 'google#safe';\n/** Helper to retrieve the value of `window.trustedTypes`. */\nfunction trustedTypes() {\n    if (typeof window !== 'undefined') {\n        return window.trustedTypes;\n    }\n    return undefined;\n}\n/**\n * Returns window.trustedTypes if Trusted Types are enabled and supported, or\n * null otherwise.\n */\nexport function getTrustedTypes() {\n    return (trustedTypesPolicyName !== '') ? (trustedTypes() ?? null) : null;\n}\n/**\n * The Trusted Types policy used by TS safevalues, or null if Trusted Types\n * are not enabled/supported, or undefined if the policy has not been created\n * yet.\n */\nlet trustedTypesPolicy;\n/**\n * Returns the Trusted Types policy used by TS safevalues, or null if Trusted\n * Types are not enabled/supported. The first call to this function will\n * create the policy.\n */\nexport function getTrustedTypesPolicy() {\n    if (trustedTypesPolicy === undefined) {\n        try {\n            trustedTypesPolicy =\n                getTrustedTypes()?.createPolicy(trustedTypesPolicyName, {\n                    createHTML: (s) => s,\n                    createScript: (s) => s,\n                    createScriptURL: (s) => s\n                }) ??\n                    null;\n        }\n        catch {\n            // In Chromium versions before 81, trustedTypes.createPolicy throws if\n            // called with a name that is already registered, even if no CSP is set.\n            // Until users have largely migrated to 81 or above, catch the error not\n            // to break the applications functionally. In such case, the code will\n            // fall back to using regular Safe Types.\n            trustedTypesPolicy = null;\n        }\n    }\n    return trustedTypesPolicy;\n}\n/** Helpers for tests. */\nexport const TEST_ONLY = {\n    resetDefaults() {\n        trustedTypesPolicy = undefined;\n        trustedTypesPolicyName = 'google#safe';\n    },\n    setTrustedTypesPolicyName(name) {\n        trustedTypesPolicyName = name;\n    },\n};\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\n/* g3_import_pure from './pure' */\nimport { ensureTokenIsValid, secretToken } from './secrets';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types';\n/**\n * Runtime implementation of `TrustedHTML` in browsers that don't support it.\n */\nclass HtmlImpl {\n    privateDoNotAccessOrElseWrappedHtml;\n    constructor(html, token) {\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedHtml = html;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedHtml.toString();\n    }\n}\nfunction createHtmlInternal(html, trusted) {\n    return (trusted ?? new HtmlImpl(html, secretToken));\n}\nconst GlobalTrustedHTML = (typeof window !== undefined) ? window.TrustedHTML : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeHtml = (GlobalTrustedHTML ?? HtmlImpl);\n/**\n * Builds a new `SafeHtml` from the given string, without enforcing safety\n * guarantees. It may cause side effects by creating a Trusted Types policy.\n * This shouldn't be exposed to application developers, and must only be used as\n * a step towards safe builders or safe constants.\n */\nexport function createHtml(html) {\n    /** @noinline */\n    const noinlineHtml = html;\n    return createHtmlInternal(noinlineHtml, getTrustedTypesPolicy()?.createHTML(noinlineHtml));\n}\n/**\n * An empty `SafeHtml` constant.\n * Unlike the function above, using this will not create a policy.\n */\nexport const EMPTY_HTML = \n/* #__PURE__ */ (() => createHtmlInternal('', getTrustedTypes()?.emptyHTML))();\n/**\n * Checks if the given value is a `SafeHtml` instance.\n */\nexport function isHtml(value) {\n    return value instanceof SafeHtml;\n}\n/**\n * Returns the value of the passed `SafeHtml` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedHTML` or a string if Trusted Types are disabled.\n */\nexport function unwrapHtml(value) {\n    if (getTrustedTypes()?.isHTML(value)) {\n        return value;\n    }\n    else if (value instanceof HtmlImpl) {\n        return value.privateDoNotAccessOrElseWrappedHtml;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeHtml';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types';\n/**\n * Runtime implementation of `TrustedScriptURL` in browsers that don't support\n * it.\n */\nclass ResourceUrlImpl {\n    privateDoNotAccessOrElseWrappedResourceUrl;\n    constructor(url, token) {\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedResourceUrl = url;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedResourceUrl.toString();\n    }\n}\nconst GlobalTrustedScriptURL = (typeof window !== undefined) ? window.TrustedScriptURL : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const TrustedResourceUrl = (GlobalTrustedScriptURL ?? ResourceUrlImpl);\n/**\n * Builds a new `TrustedResourceUrl` from the given string, without\n * enforcing safety guarantees. It may cause side effects by creating a Trusted\n * Types policy. This shouldn't be exposed to application developers, and must\n * only be used as a step towards safe builders or safe constants.\n */\nexport function createResourceUrl(url) {\n    /** @noinline */\n    const noinlineUrl = url;\n    const trustedScriptURL = getTrustedTypesPolicy()?.createScriptURL(noinlineUrl);\n    return (trustedScriptURL ?? new ResourceUrlImpl(noinlineUrl, secretToken));\n}\n/**\n * Checks if the given value is a `TrustedResourceUrl` instance.\n */\nexport function isResourceUrl(value) {\n    return value instanceof TrustedResourceUrl;\n}\n/**\n * Returns the value of the passed `TrustedResourceUrl` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedScriptURL` or a string if Trusted Types are\n * disabled.\n */\nexport function unwrapResourceUrl(value) {\n    if (getTrustedTypes()?.isScriptURL(value)) {\n        return value;\n    }\n    else if (value instanceof ResourceUrlImpl) {\n        return value.privateDoNotAccessOrElseWrappedResourceUrl;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping TrustedResourceUrl';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\n/* g3_import_pure from './pure' */\nimport { ensureTokenIsValid, secretToken } from './secrets';\nimport { getTrustedTypes, getTrustedTypesPolicy } from './trusted_types';\n/**\n * Runtime implementation of `TrustedScript` in browswers that don't support it.\n * script element.\n */\nclass ScriptImpl {\n    privateDoNotAccessOrElseWrappedScript;\n    constructor(script, token) {\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedScript = script;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedScript.toString();\n    }\n}\nfunction createScriptInternal(script, trusted) {\n    return (trusted ?? new ScriptImpl(script, secretToken));\n}\nconst GlobalTrustedScript = (typeof window !== undefined) ? window.TrustedScript : undefined;\n/**\n * Also exports the constructor so that instanceof checks work.\n */\nexport const SafeScript = (GlobalTrustedScript ?? ScriptImpl);\n/**\n * Builds a new `SafeScript` from the given string, without enforcing\n * safety guarantees. It may cause side effects by creating a Trusted Types\n * policy. This shouldn't be exposed to application developers, and must only be\n * used as a step towards safe builders or safe constants.\n */\nexport function createScript(script) {\n    /** @noinline */\n    const noinlineScript = script;\n    return createScriptInternal(noinlineScript, getTrustedTypesPolicy()?.createScript(noinlineScript));\n}\n/**\n * An empty `SafeScript` constant.\n * Unlike the functions above, using this will not create a policy.\n */\nexport const EMPTY_SCRIPT = \n/* #__PURE__ */ (() => createScriptInternal('', getTrustedTypes()?.emptyScript))();\n/**\n * Checks if the given value is a `SafeScript` instance.\n */\nexport function isScript(value) {\n    return value instanceof SafeScript;\n}\n/**\n * Returns the value of the passed `SafeScript` object while ensuring it\n * has the correct type.\n *\n * Returns a native `TrustedScript` or a string if Trusted Types are disabled.\n */\nexport function unwrapScript(value) {\n    if (getTrustedTypes()?.isScript(value)) {\n        return value;\n    }\n    else if (value instanceof ScriptImpl) {\n        return value.privateDoNotAccessOrElseWrappedScript;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeScript';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { createHtml, unwrapHtml } from '../internals/html_impl';\nimport { unwrapResourceUrl } from '../internals/resource_url_impl';\nimport { unwrapScript } from '../internals/script_impl';\n/**\n * Returns HTML-escaped text as a `SafeHtml` object.\n *\n * Available options:\n * - `preserveSpaces` turns every second consecutive space character into its\n * HTML entity representation (`&#160;`).\n * - `preserveNewlines` turns newline characters into breaks (`<br>`).\n * - `preserveTabs` wraps tab characters in a span with style=white-space:pre.\n */\nexport function htmlEscape(text, options = {}) {\n    let htmlEscapedString = htmlEscapeToString(text);\n    if (options.preserveSpaces) {\n        // Do this first to ensure we preserve spaces after newlines and tabs.\n        htmlEscapedString =\n            htmlEscapedString.replace(/(^|[\\r\\n\\t ]) /g, '$1&#160;');\n    }\n    if (options.preserveNewlines) {\n        htmlEscapedString = htmlEscapedString.replace(/(\\r\\n|\\n|\\r)/g, '<br>');\n    }\n    if (options.preserveTabs) {\n        htmlEscapedString = htmlEscapedString.replace(/(\\t+)/g, '<span style=\"white-space:pre\">$1</span>');\n    }\n    return createHtml(htmlEscapedString);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with inline script content.\n */\nexport function createScript(script, options = {}) {\n    const unwrappedScript = unwrapScript(script).toString();\n    let stringTag = `<script`;\n    if (options.id) {\n        stringTag += ` id=\"${htmlEscapeToString(options.id)}\"`;\n    }\n    if (options.nonce) {\n        stringTag += ` nonce=\"${htmlEscapeToString(options.nonce)}\"`;\n    }\n    if (options.type) {\n        stringTag += ` type=\"${htmlEscapeToString(options.type)}\"`;\n    }\n    stringTag += `>${unwrappedScript}\\x3c/script>`;\n    return createHtml(stringTag);\n}\n/**\n * Creates a `SafeHtml` representing a script tag with the src attribute.\n * This also supports CSP nonces and async loading.\n */\nexport function createScriptSrc(src, async, nonce) {\n    const unwrappedSrc = unwrapResourceUrl(src).toString();\n    let stringTag = `<script src=\"${htmlEscapeToString(unwrappedSrc)}\"`;\n    if (async) {\n        stringTag += ' async';\n    }\n    if (nonce) {\n        stringTag += ` nonce=\"${htmlEscapeToString(nonce)}\"`;\n    }\n    stringTag += '>\\x3c/script>';\n    return createHtml(stringTag);\n}\n/**\n * HTML-escapes the given text (`&`, `<`, `>`, `\"` and `'`).\n */\nfunction htmlEscapeToString(text) {\n    const escaped = text.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&apos;');\n    return escaped;\n}\n/** Creates a `SafeHtml` value by concatenating multiple `SafeHtml`s. */\nexport function concatHtmls(htmls) {\n    return createHtml(htmls.map(unwrapHtml).join(''));\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview Provides functions to enforce the SafeUrl contract at the sink\n * level.\n */\nimport '../environment/dev';\nfunction extractScheme(url) {\n    let parsedUrl;\n    try {\n        parsedUrl = new URL(url);\n    }\n    catch (e) {\n        // According to https://url.spec.whatwg.org/#constructors, the URL\n        // constructor with one parameter throws if `url` is not absolute. In this\n        // case, we are sure that no explicit scheme (javascript: ) is set.\n        // This can also be a URL parsing error, but in this case the URL won't be\n        // run anyway.\n        return 'https:';\n    }\n    return parsedUrl.protocol;\n}\n// We can't use an ES6 Set here because gws somehow depends on this code and\n// doesn't want to pay the cost of a polyfill.\nconst ALLOWED_SCHEMES = ['data:', 'http:', 'https:', 'mailto:', 'ftp:'];\n/**\n * Checks that the URL scheme is not javascript.\n * The URL parsing relies on the URL API in browsers that support it.\n * @param url The URL to sanitize for a SafeUrl sink.\n * @return undefined if url has a javascript: scheme, the original URL\n *     otherwise.\n */\nexport function sanitizeJavascriptUrl(url) {\n    const parsedScheme = extractScheme(url);\n    if (parsedScheme === 'javascript:') {\n        if (process.env.NODE_ENV !== 'production') {\n            console.error(`A URL with content '${url}' was sanitized away.`);\n        }\n        return undefined;\n    }\n    return url;\n}\n/**\n * Adapter to sanitize string URLs in DOM sink wrappers.\n * @return undefined if the URL was sanitized.\n */\nexport function unwrapUrlOrSanitize(url) {\n    return sanitizeJavascriptUrl(url);\n}\n/**\n * Sanitizes a URL restrictively.\n * This sanitizer protects against XSS and potentially other uncommon and\n * undesirable schemes that an attacker could use for e.g. phishing (tel:,\n * callto: ssh: etc schemes). This sanitizer is primarily meant to be used by\n * the HTML sanitizer.\n */\nexport function restrictivelySanitizeUrl(url) {\n    const parsedScheme = extractScheme(url);\n    if (parsedScheme !== undefined &&\n        ALLOWED_SCHEMES.indexOf(parsedScheme.toLowerCase()) !== -1) {\n        return url;\n    }\n    return 'about:invalid#zClosurez';\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\n/**\n * Sequence of CSS declarations safe to use in style contexts in an HTML\n * document or in DOM APIs.\n */\nexport class SafeStyle {\n    // @ts-ignore: error TS6133: 'brand' is declared but its value is never read.\n    brand; // To prevent structural typing.\n}\n/** Implementation for `SafeStyle` */\nclass StyleImpl extends SafeStyle {\n    privateDoNotAccessOrElseWrappedStyle;\n    constructor(style, token) {\n        super();\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedStyle = style;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedStyle;\n    }\n}\n/**\n * Builds a new `SafeStyle` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createStyle(style) {\n    return new StyleImpl(style, secretToken);\n}\n/**\n * Checks if the given value is a `SafeStyle` instance.\n */\nexport function isStyle(value) {\n    return value instanceof StyleImpl;\n}\n/**\n * Returns the string value of the passed `SafeStyle` object while ensuring it\n * has the correct type.\n */\nexport function unwrapStyle(value) {\n    if (value instanceof StyleImpl) {\n        return value.privateDoNotAccessOrElseWrappedStyle;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeStyle';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * @fileoverview This contains safe wrappers for properties that aren't specific\n * to one kind of HTMLElement (like innerHTML), plus other setters and functions\n * that are not tied to elements (like location.href or Worker constructor).\n */\nimport { unwrapAttributePrefix } from '../../internals/attribute_impl';\nimport { unwrapHtml } from '../../internals/html_impl';\nimport { unwrapStyle } from '../../internals/style_impl';\n/**\n * Safely set {@link Element.innerHTML} on a given ShadowRoot or Element which\n * may not be a `<script>` element or a `<style>` element.\n */\nexport function setInnerHtml(elOrRoot, v) {\n    if (isElement(elOrRoot)) {\n        throwIfScriptOrStyle(elOrRoot);\n    }\n    elOrRoot.innerHTML = unwrapHtml(v);\n}\n/**\n * Safely set {@link Element.outerHTML} for the given Element.\n */\nexport function setOuterHtml(e, v) {\n    const parent = e.parentElement;\n    if (parent !== null) {\n        throwIfScriptOrStyle(parent);\n    }\n    e.outerHTML = unwrapHtml(v);\n}\n/**\n * Set `ElementCSSInlineStyle.cssText` for the given `ElementCSSInlineStyle`.\n */\nexport function setCssText(e, v) {\n    e.style.cssText = unwrapStyle(v);\n}\n/**\n * Safely call {@link Element.insertAdjacentHTML} for the given Element.\n */\nexport function insertAdjacentHtml(element, position, v) {\n    const tagContext = (position === 'beforebegin' || position === 'afterend') ?\n        element.parentElement :\n        element;\n    if (tagContext !== null) {\n        throwIfScriptOrStyle(tagContext);\n    }\n    element.insertAdjacentHTML(position, unwrapHtml(v));\n}\n/**\n * Given a set of known-to-be-safe prefixes (e.g., \"data-\", \"aria-\", \"js\"),\n * return a setter function that allows you to set attributes on an element,\n * as long as the names of the attributes to be set has one of the prefixes.\n *\n * The returned setter ensures that setting any dangerous attribute, e.g.,\n * \"src\", \"href\" will cause an exception. This is intended to be used as the\n * safe alterantive of `Element#setAttribute`, when applications need to set\n * attributes that do not have security implications and do not have a\n * corresponding DOM property.\n */\nexport function buildPrefixedAttributeSetter(prefix, ...otherPrefixes) {\n    const prefixes = [prefix, ...otherPrefixes];\n    return (e, attr, value) => {\n        setPrefixedAttribute(prefixes, e, attr, value);\n    };\n}\n/**\n * The safe alternative to Element#setAttribute. The function takes a list of\n * `SafeAttributePrefix`, making developer intention explicit. The attribute\n * to be set must has one of the safe prefixes, otherwise the function throws\n * an Error.\n */\nexport function setPrefixedAttribute(attrPrefixes, e, attr, value) {\n    if (attrPrefixes.length === 0) {\n        throw new Error('No prefixes are provided');\n    }\n    const prefixes = attrPrefixes.map(s => unwrapAttributePrefix(s));\n    const attrLower = attr.toLowerCase();\n    if (prefixes.every(p => attrLower.indexOf(p) !== 0)) {\n        throw new Error(`Attribute \"${attr}\" does not match any of the allowed prefixes.`);\n    }\n    e.setAttribute(attr, value);\n}\nfunction throwIfScriptOrStyle(element) {\n    if (element.tagName.toLowerCase() === 'script') {\n        throw new Error('Use setTextContent with a SafeScript.');\n    }\n    else if (element.tagName.toLowerCase() === 'style') {\n        throw new Error('Use setTextContent with a SafeStyleSheet.');\n    }\n}\nfunction isElement(elOrRoot) {\n    return elOrRoot.tagName !== undefined;\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { setInnerHtml } from '../../dom/elements/element';\nimport { createHtml } from '../../internals/html_impl';\n/**\n * Returns a fragment that contains the parsed HTML for `dirtyHtml` without\n * executing any of the potential payload.\n */\nexport function createInertFragment(dirtyHtml) {\n    const template = document.createElement('template');\n    // This call is only used to create an inert tree for the sanitizer to\n    // further process and is never returned directly to the caller. We can't use\n    // a reviewed conversion in order to avoid an import loop.\n    const temporarySafeHtml = createHtml(dirtyHtml);\n    setInnerHtml(template, temporarySafeHtml);\n    return template.content;\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * Library that provides safe getters for different node properties and\n * checks for clobbering.\n */\n/** Gets a reasonable nodeName, even for clobbered nodes. */\nexport function getNodeName(node) {\n    const nodeName = node.nodeName;\n    // If the property is clobbered, assume it is an `HTMLFormElement`.\n    return (typeof nodeName === 'string') ? nodeName : 'FORM';\n}\n/** Returns true if the object passed is a Text node. */\nexport function isText(node) {\n    // The property cannot get clobbered on Text nodes.\n    return node.nodeType === Node.TEXT_NODE;\n}\n/** Returns true if the object passed is an Element node. */\nexport function isElement(node) {\n    const nodeType = node.nodeType;\n    // If the property is clobbered, we can assume it is an `HTMLFormElement`, and\n    // thus an `Element`.\n    return (nodeType === Node.ELEMENT_NODE) || (typeof nodeType !== 'number');\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\n/** Class for holding element and attribute policies used for sanitization. */\nexport class SanitizerTable {\n    allowedElements;\n    elementPolicies;\n    allowedGlobalAttributes;\n    globalAttributePolicies;\n    constructor(allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies) {\n        this.allowedElements = allowedElements;\n        this.elementPolicies = elementPolicies;\n        this.allowedGlobalAttributes = allowedGlobalAttributes;\n        this.globalAttributePolicies = globalAttributePolicies;\n    }\n    isAllowedElement(elementName) {\n        // Note: `HTMLFormElement`s are always dropped, supporting them is very\n        // costly because of the DOM clobberring they can cause. The additional code\n        // size required to properly work around DOM clobberring issues is large and\n        // shouldn't be put on every user of the sanitizer. Thoroughly review\n        // b/210975025 and the CLs linked there before you start allowing form\n        // elements.\n        return elementName.toLowerCase() !== 'form' &&\n            (this.allowedElements.has(elementName) ||\n                this.elementPolicies.has(elementName));\n    }\n    getAttributePolicy(attributeName, elementName) {\n        const elementPolicy = this.elementPolicies.get(elementName);\n        if (elementPolicy?.has(attributeName)) {\n            return elementPolicy.get(attributeName);\n        }\n        if (this.allowedGlobalAttributes.has(attributeName)) {\n            return { policyAction: AttributePolicyAction.KEEP };\n        }\n        const globalPolicy = this.globalAttributePolicies.get(attributeName);\n        return globalPolicy || { policyAction: AttributePolicyAction.DROP };\n    }\n}\n/**\n * Values derived from\n * https://godoc.corp.google.com/pkg/google3/third_party/safehtml/sanitizer/policy#AttributePolicy\n */\nexport var AttributePolicyAction;\n(function (AttributePolicyAction) {\n    AttributePolicyAction[AttributePolicyAction[\"DROP\"] = 0] = \"DROP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP\"] = 1] = \"KEEP\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_URL\"] = 2] = \"KEEP_AND_SANITIZE_URL\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_NORMALIZE\"] = 3] = \"KEEP_AND_NORMALIZE\";\n    AttributePolicyAction[AttributePolicyAction[\"KEEP_AND_SANITIZE_STYLE\"] = 4] = \"KEEP_AND_SANITIZE_STYLE\";\n})(AttributePolicyAction || (AttributePolicyAction = {}));\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { AttributePolicyAction, SanitizerTable } from './sanitizer_table';\n/**\n * GENERATED CODE, DO NOT MODIFY\n * This SanitizerTable was generated from the checked in html contract:\n *  webutil/html/types/codegen/html5_contract.textpb\n *\n * You can regenerate this file with:\n * webutil/html/types/codegen/update_generated_source_files.sh\n */\nexport const defaultSanitizerTable = new SanitizerTable(new Set([\n    'ARTICLE', 'SECTION', 'NAV', 'ASIDE', 'H1', 'H2',\n    'H3', 'H4', 'H5', 'H6', 'HEADER', 'FOOTER',\n    'ADDRESS', 'P', 'HR', 'PRE', 'BLOCKQUOTE', 'OL',\n    'UL', 'LH', 'LI', 'DL', 'DT', 'DD',\n    'FIGURE', 'FIGCAPTION', 'MAIN', 'DIV', 'EM', 'STRONG',\n    'SMALL', 'S', 'CITE', 'Q', 'DFN', 'ABBR',\n    'RUBY', 'RB', 'RT', 'RTC', 'RP', 'DATA',\n    'TIME', 'CODE', 'VAR', 'SAMP', 'KBD', 'SUB',\n    'SUP', 'I', 'B', 'U', 'MARK', 'BDI',\n    'BDO', 'SPAN', 'BR', 'WBR', 'INS', 'DEL',\n    'PICTURE', 'PARAM', 'TRACK', 'MAP', 'TABLE', 'CAPTION',\n    'COLGROUP', 'COL', 'TBODY', 'THEAD', 'TFOOT', 'TR',\n    'TD', 'TH', 'SELECT', 'DATALIST', 'OPTGROUP', 'OPTION',\n    'OUTPUT', 'PROGRESS', 'METER', 'FIELDSET', 'LEGEND', 'DETAILS',\n    'SUMMARY', 'MENU', 'DIALOG', 'SLOT', 'CANVAS', 'FONT',\n    'CENTER',\n]), new Map([\n    [\n        'A', new Map([\n            ['href', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n    [\n        'AREA', new Map([\n            ['href', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n    [\n        'LINK', new Map([\n            [\n                'href', {\n                    policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL,\n                    conditions: new Map([[\n                            'rel', new Set([\n                                'alternate',\n                                'author',\n                                'bookmark',\n                                'canonical',\n                                'cite',\n                                'help',\n                                'icon',\n                                'license',\n                                'next',\n                                'prefetch',\n                                'dns-prefetch',\n                                'prerender',\n                                'preconnect',\n                                'preload',\n                                'prev',\n                                'search',\n                                'subresource',\n                            ])\n                        ]])\n                }\n            ],\n        ])\n    ],\n    [\n        'SOURCE', new Map([\n            ['src', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n    [\n        'IMG', new Map([\n            ['src', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n    [\n        'VIDEO', new Map([\n            ['src', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n    [\n        'AUDIO', new Map([\n            ['src', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n        ])\n    ],\n]), new Set([\n    'title',\n    'aria-atomic',\n    'aria-autocomplete',\n    'aria-busy',\n    'aria-checked',\n    'aria-current',\n    'aria-disabled',\n    'aria-dropeffect',\n    'aria-expanded',\n    'aria-haspopup',\n    'aria-hidden',\n    'aria-invalid',\n    'aria-label',\n    'aria-level',\n    'aria-live',\n    'aria-multiline',\n    'aria-multiselectable',\n    'aria-orientation',\n    'aria-posinset',\n    'aria-pressed',\n    'aria-readonly',\n    'aria-relevant',\n    'aria-required',\n    'aria-selected',\n    'aria-setsize',\n    'aria-sort',\n    'aria-valuemax',\n    'aria-valuemin',\n    'aria-valuenow',\n    'aria-valuetext',\n    'alt',\n    'align',\n    'autocapitalize',\n    'autocomplete',\n    'autocorrect',\n    'autofocus',\n    'autoplay',\n    'bgcolor',\n    'border',\n    'cellpadding',\n    'cellspacing',\n    'checked',\n    'color',\n    'cols',\n    'colspan',\n    'controls',\n    'datetime',\n    'disabled',\n    'download',\n    'draggable',\n    'enctype',\n    'face',\n    'formenctype',\n    'frameborder',\n    'height',\n    'hreflang',\n    'hidden',\n    'ismap',\n    'label',\n    'lang',\n    'loop',\n    'max',\n    'maxlength',\n    'media',\n    'minlength',\n    'min',\n    'multiple',\n    'muted',\n    'nonce',\n    'open',\n    'placeholder',\n    'preload',\n    'rel',\n    'required',\n    'reversed',\n    'role',\n    'rows',\n    'rowspan',\n    'selected',\n    'shape',\n    'size',\n    'sizes',\n    'slot',\n    'span',\n    'spellcheck',\n    'start',\n    'step',\n    'summary',\n    'translate',\n    'type',\n    'valign',\n    'value',\n    'width',\n    'wrap',\n    'itemscope',\n    'itemtype',\n    'itemid',\n    'itemprop',\n    'itemref',\n]), new Map([\n    [\n        'dir', {\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n            conditions: new Map([[\n                    'dir', new Set([\n                        'auto',\n                        'ltr',\n                        'rtl',\n                    ])\n                ]])\n        }\n    ],\n    [\n        'async', {\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n            conditions: new Map([[\n                    'async', new Set([\n                        'async',\n                    ])\n                ]])\n        }\n    ],\n    ['cite', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n    [\n        'loading', {\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n            conditions: new Map([[\n                    'loading', new Set([\n                        'eager',\n                        'lazy',\n                    ])\n                ]])\n        }\n    ],\n    ['poster', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_URL }],\n    [\n        'target', {\n            policyAction: AttributePolicyAction.KEEP_AND_NORMALIZE,\n            conditions: new Map([[\n                    'target', new Set([\n                        '_self',\n                        '_blank',\n                    ])\n                ]])\n        }\n    ],\n]));\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../../environment/dev';\nimport { createHtml } from '../../internals/html_impl';\n/* g3_import_pure from '../../internals/pure' */\nimport { ensureTokenIsValid, secretToken } from '../../internals/secrets';\nimport { restrictivelySanitizeUrl } from '../url_sanitizer';\nimport { createInertFragment } from './inert_fragment';\nimport { getNodeName, isElement, isText } from './no_clobber';\nimport { defaultSanitizerTable } from './sanitizer_table/default_sanitizer_table';\nimport { AttributePolicyAction } from './sanitizer_table/sanitizer_table';\n/** Implementation for `HtmlSanitizer` */\nexport class HtmlSanitizerImpl {\n    sanitizerTable;\n    changes = [];\n    constructor(sanitizerTable, token) {\n        this.sanitizerTable = sanitizerTable;\n        ensureTokenIsValid(token);\n    }\n    sanitizeAssertUnchanged(html) {\n        this.changes = [];\n        const sanitizedHtml = this.sanitize(html);\n        if (this.changes.length !== 0) {\n            let message = '';\n            if (process.env.NODE_ENV !== 'production') {\n                message =\n                    `Unexpected change to HTML value as a result of sanitization. ` +\n                        `Input: \"${html}\", sanitized output: \"${sanitizedHtml}\"\\n` +\n                        `List of changes:${this.changes.join('\\n')}`;\n            }\n            throw new Error(message);\n        }\n        return sanitizedHtml;\n    }\n    sanitize(html) {\n        const fakeRoot = document.createElement('span');\n        fakeRoot.appendChild(this.sanitizeToFragment(html));\n        // XML serialization is preferred over HTML serialization as it is\n        // stricter and makes sure all attributes are properly escaped, avoiding\n        // cases where the tree might mutate when parsed again later due to the\n        // complexities of the HTML parsing algorithm\n        let serializedNewTree = new XMLSerializer().serializeToString(fakeRoot);\n        // We remove the outer most element as this is the span node created as\n        // the root for the sanitized tree and contains a spurious xmlns attribute\n        // from the XML serialization step.\n        serializedNewTree = serializedNewTree.slice(serializedNewTree.indexOf('>') + 1, serializedNewTree.lastIndexOf('</'));\n        return createHtml(serializedNewTree);\n    }\n    sanitizeToFragment(html) {\n        const dirtyFragment = createInertFragment(html);\n        const treeWalker = document.createTreeWalker(dirtyFragment, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, \n        // IE10 and IE11 won't accept a proper `NodeFilter` interface, and\n        // expect the filtering function to be passed directly. It seems that\n        // other browsers also do not mind getting the function directly. see\n        // https://stackoverflow.com/q/38245898\n        ((n) => this.nodeFilter(n)), \n        // @ts-ignore: error TS2554: Expected 1-3 arguments, but got 4.\n        false);\n        // `nextNode` is called so we skip the root `DocumentFragment`.\n        let currentNode = treeWalker.nextNode();\n        // We create a root element to attach all the children of the body to. We\n        // use div as it as a semantic-free, generic container and does not\n        // represent anything. This is removed when we serialize the tree back\n        // into a string.\n        const sanitizedFragment = document.createDocumentFragment();\n        let sanitizedParent = sanitizedFragment;\n        while (currentNode !== null) {\n            let sanitizedNode;\n            if (isText(currentNode)) {\n                sanitizedNode = this.sanitizeTextNode(currentNode);\n            }\n            else if (isElement(currentNode)) {\n                sanitizedNode = this.sanitizeElementNode(currentNode);\n            }\n            else {\n                throw new Error('Node is not of type text or element');\n            }\n            sanitizedParent.appendChild(sanitizedNode);\n            // Advance iterator while keeping track of the sanitized parent for the\n            // current node\n            currentNode = treeWalker.firstChild();\n            if (currentNode) {\n                sanitizedParent = sanitizedNode;\n            }\n            else {\n                while (!(currentNode = treeWalker.nextSibling())) {\n                    if (!(currentNode = treeWalker.parentNode())) {\n                        break;\n                    }\n                    sanitizedParent = sanitizedParent.parentNode;\n                }\n            }\n        }\n        return sanitizedFragment;\n    }\n    sanitizeTextNode(textNode) {\n        return document.createTextNode(textNode.data);\n    }\n    sanitizeElementNode(elementNode) {\n        const elementName = getNodeName(elementNode);\n        const newNode = document.createElement(elementName);\n        const dirtyAttributes = elementNode.attributes;\n        for (const { name, value } of dirtyAttributes) {\n            const policy = this.sanitizerTable.getAttributePolicy(name, elementName);\n            if (!this.satisfiesAllConditions(policy.conditions, dirtyAttributes)) {\n                this.recordChange(`Not all conditions satisfied for attribute: ${name}.`);\n                continue;\n            }\n            switch (policy.policyAction) {\n                case AttributePolicyAction.KEEP:\n                    newNode.setAttribute(name, value);\n                    break;\n                case AttributePolicyAction.KEEP_AND_SANITIZE_URL:\n                    const sanitizedAttrUrl = restrictivelySanitizeUrl(value);\n                    if (sanitizedAttrUrl !== value) {\n                        this.recordChange(`Url in attribute ${name} was modified during sanitization. Original url:\"${value}\" was sanitized to: \"${sanitizedAttrUrl}\"`);\n                    }\n                    newNode.setAttribute(name, sanitizedAttrUrl);\n                    break;\n                case AttributePolicyAction.KEEP_AND_NORMALIZE:\n                    // We don't consider changing the case of an attribute value to be a\n                    // semantic change\n                    newNode.setAttribute(name, value.toLowerCase());\n                    break;\n                case AttributePolicyAction.KEEP_AND_SANITIZE_STYLE:\n                    newNode.setAttribute(name, value);\n                    break;\n                case AttributePolicyAction.DROP:\n                    this.recordChange(`Attribute: ${name} was dropped`);\n                    break;\n                default:\n                    checkExhaustive(policy.policyAction, 'Unhandled AttributePolicyAction case');\n            }\n        }\n        return newNode;\n    }\n    nodeFilter(node) {\n        if (isText(node)) {\n            return NodeFilter.FILTER_ACCEPT;\n        }\n        else if (!isElement(node)) {\n            // Getting a node that is neither an `Element` or a `Text` node. This is\n            // likely due to something that is not supposed to be an element in user\n            // code but recognized as such by the TreeWalker (e.g. a polyfill for\n            // other kind of nodes). Since we can't recognize it as an element, we\n            // drop the node, but we don't record it as a meaningful change.\n            return NodeFilter.FILTER_REJECT;\n        }\n        const nodeName = getNodeName(node);\n        if (nodeName === null) {\n            this.recordChange(`Node name was null for node: ${node}`);\n            return NodeFilter.FILTER_REJECT;\n        }\n        if (this.sanitizerTable.isAllowedElement(nodeName)) {\n            return NodeFilter.FILTER_ACCEPT;\n        }\n        this.recordChange(`Element: ${nodeName} was dropped`);\n        return NodeFilter.FILTER_REJECT;\n    }\n    recordChange(errorMessage) {\n        if (process.env.NODE_ENV !== 'production') {\n            this.changes.push(errorMessage);\n        }\n        else if (this.changes.length === 0) {\n            this.changes.push('');\n        }\n    }\n    satisfiesAllConditions(conditions, attrs) {\n        if (!conditions) {\n            return true;\n        }\n        for (const [attrName, expectedValues] of conditions) {\n            const value = attrs.getNamedItem(attrName)?.value;\n            if (value && !expectedValues.has(value)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nconst defaultHtmlSanitizer = \n/* #__PURE__ */ (() => new HtmlSanitizerImpl(defaultSanitizerTable, secretToken))();\n/** Sanitizes untrusted html using the default sanitizer configuration. */\nexport function sanitizeHtml(html) {\n    return defaultHtmlSanitizer.sanitize(html);\n}\n/**\n * Sanitizes untrusted html using the default sanitizer configuration. Throws\n * an error if the html was changed.\n */\nexport function sanitizeHtmlAssertUnchanged(html) {\n    return defaultHtmlSanitizer.sanitizeAssertUnchanged(html);\n}\n/**\n * Sanitizes untrusted html using the default sanitizer configuration. Throws\n * an error if the html was changed.\n */\nexport function sanitizeHtmlToFragment(html) {\n    return defaultHtmlSanitizer.sanitizeToFragment(html);\n}\nfunction checkExhaustive(value, msg = `unexpected value ${value}!`) {\n    throw new Error(msg);\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { secretToken } from '../../internals/secrets';\nimport { HtmlSanitizerImpl } from './html_sanitizer';\nimport { defaultSanitizerTable } from './sanitizer_table/default_sanitizer_table';\nimport { AttributePolicyAction, SanitizerTable } from './sanitizer_table/sanitizer_table';\n/** This class allows modifications to the default sanitizer configuration. */\nexport class HtmlSanitizerBuilder {\n    sanitizerTable;\n    // To denote if the builder has called build() and therefore should make no\n    // further changes to the sanitizer table.\n    calledBuild = false;\n    constructor() {\n        this.sanitizerTable = defaultSanitizerTable;\n    }\n    /** Builder option to restrict allowed elements to a smaller subset. */\n    onlyAllowElements(elementSet) {\n        const allowedElements = new Set();\n        const allowedElementPolicies = new Map();\n        for (let element of elementSet) {\n            element = element.toUpperCase();\n            if (!this.sanitizerTable.isAllowedElement(element)) {\n                throw new Error(`Element: ${element}, is not allowed by html5_contract.textpb`);\n            }\n            const elementPolicy = this.sanitizerTable.elementPolicies.get(element);\n            if (elementPolicy !== undefined) {\n                allowedElementPolicies.set(element, elementPolicy);\n            }\n            else {\n                allowedElements.add(element);\n            }\n        }\n        this.sanitizerTable = new SanitizerTable(allowedElements, allowedElementPolicies, this.sanitizerTable.allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Builder option to restrict allowed attributes to a smaller subset.\n     *\n     * If the attribute isn't currently allowed then it won't be added.\n     */\n    onlyAllowAttributes(attributeSet) {\n        const allowedGlobalAttributes = new Set();\n        const globalAttributePolicies = new Map();\n        const elementPolicies = new Map();\n        for (const attribute of attributeSet) {\n            if (this.sanitizerTable.allowedGlobalAttributes.has(attribute)) {\n                allowedGlobalAttributes.add(attribute);\n            }\n            if (this.sanitizerTable.globalAttributePolicies.has(attribute)) {\n                globalAttributePolicies.set(attribute, this.sanitizerTable.globalAttributePolicies.get(attribute));\n            }\n        }\n        for (const [elementName, originalElementPolicy] of this.sanitizerTable\n            .elementPolicies.entries()) {\n            const newElementPolicy = new Map();\n            for (const [attribute, attributePolicy] of originalElementPolicy\n                .entries()) {\n                if (attributeSet.has(attribute)) {\n                    newElementPolicy.set(attribute, attributePolicy);\n                }\n            }\n            elementPolicies.set(elementName, newElementPolicy);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, elementPolicies, allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Allows the set of data attributes passed.\n     *\n     * These values must be prefixed with \"data-\"\n     *\n     * If called with onlyAllowElements or onlyAllowAttributes, those methods must\n     * be called first.\n     */\n    allowDataAttributes(attributes) {\n        const allowedGlobalAttributes = new Set(this.sanitizerTable.allowedGlobalAttributes);\n        for (const attribute of attributes) {\n            if (attribute.indexOf('data-') !== 0) {\n                throw new Error(`data attribute: ${attribute} does not begin with the prefix \"data-\"`);\n            }\n            allowedGlobalAttributes.add(attribute);\n        }\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, allowedGlobalAttributes, this.sanitizerTable.globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves style attributes. Note that the sanitizer won't parse and\n     * sanitize the values but keep them as they are. In particular this means\n     * that the code will be able to call functions that could do undesirable\n     * things (e.g. `url` to trigger a network request), as well as any custom\n     * properties or functions defined by the application.\n     */\n    allowStyleAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('style', { policyAction: AttributePolicyAction.KEEP_AND_SANITIZE_STYLE });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves the class attribute on all elements. This means contents can\n     * adopt CSS styles from other page elements and possibly mask themselves as\n     * legitimate UI elements, which can lead to phishing.\n     */\n    allowClassAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('class', { policyAction: AttributePolicyAction.KEEP });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    /**\n     * Preserves id attributes. This carries moderate risk as it allows an\n     * element to override other elements with the same ID.\n     */\n    allowIdAttributes() {\n        const globalAttributePolicies = new Map(this.sanitizerTable.globalAttributePolicies);\n        globalAttributePolicies.set('id', { policyAction: AttributePolicyAction.KEEP });\n        this.sanitizerTable = new SanitizerTable(this.sanitizerTable.allowedElements, this.sanitizerTable.elementPolicies, this.sanitizerTable.allowedGlobalAttributes, globalAttributePolicies);\n        return this;\n    }\n    build() {\n        if (this.calledBuild) {\n            throw new Error('this sanitizer has already called build');\n        }\n        this.calledBuild = true;\n        return new HtmlSanitizerImpl(this.sanitizerTable, secretToken);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { createResourceUrl, unwrapResourceUrl } from '../internals/resource_url_impl';\nimport { unwrapScript } from '../internals/script_impl';\nimport { assertIsTemplateObject } from '../internals/string_literal';\n/**\n * Check whether the base url contains a valid origin,\n *\n * A string for an origin must contain only alphanumeric or any of the\n * following: `-.:`, and must not be an IP address. Remember that, as per the\n * documentation for TrustedResourceUrl, the origin must be trustworthy.\n *\n * @param base The base url that contains an origin.\n */\nfunction hasValidOrigin(base) {\n    if (!(/^https:\\/\\//.test(base) || /^\\/\\//.test(base))) {\n        return false;\n    }\n    const originStart = base.indexOf('//') + 2;\n    const originEnd = base.indexOf('/', originStart);\n    // If the base url only contains the prefix (e.g. //), or the slash\n    // for the origin is right after the prefix (e.g. ///), the origin is\n    // missing.\n    if (originEnd <= originStart) {\n        throw new Error(`Can't interpolate data in a url's origin, ` +\n            `Please make sure to fully specify the origin, terminated with '/'.`);\n    }\n    const origin = base.substring(originStart, originEnd);\n    if (!/^[0-9a-z.:-]+$/i.test(origin)) {\n        throw new Error('The origin contains unsupported characters.');\n    }\n    if (!/^[^:]*(:[0-9]+)?$/i.test(origin)) {\n        throw new Error('Invalid port number.');\n    }\n    if (!/(^|\\.)[a-z][^.]*$/i.test(origin)) {\n        throw new Error('The top-level domain must start with a letter.');\n    }\n    return true;\n}\n/**\n * Check whether the base url contains a valid about url at its beginning.\n *\n * An about url is either exactly 'about:blank' or 'about:blank#<str>' where\n * <str> can be an arbitrary string.\n *\n * @param base The base url.\n */\nfunction isValidAboutUrl(base) {\n    if (!/^about:blank/.test(base)) {\n        return false;\n    }\n    if (base !== 'about:blank' && !/^about:blank#/.test(base)) {\n        throw new Error('The about url is invalid.');\n    }\n    return true;\n}\n/**\n * Check whether the base url contains a valid path start at its beginning.\n *\n * A valid path start is either a '/' or a '/' followed by at least one\n * character that is not '/' or '\\'.\n *\n * @param base The base url.\n */\nfunction isValidPathStart(base) {\n    if (!/^\\//.test(base)) {\n        return false;\n    }\n    if ((base === '/') ||\n        (base.length > 1 && base[1] !== '/' && base[1] !== '\\\\')) {\n        return true;\n    }\n    throw new Error('The path start in the url is invalid.');\n}\n/**\n * Builds TrustedResourceUrl from a template literal.\n *\n * This factory is a template literal tag function. It should be called with\n * a template literal, with or without embedded expressions. For example,\n *               trustedResourceUrl`//example.com/${bar}`;\n * or\n *               trustedResourceUrl`//example.com`;\n *\n * When this function is called with a template literal without any embedded\n * expressions, the template string may contain anything as the whole URL is\n * a compile-time string constant.\n *\n * When this function is called with a template literal that contains embedded\n * expressions, the template must start with one of the following:\n * - `https://<origin>/`\n * - `//<origin>/`\n * - `/<pathStart>`\n * - `about:blank`\n * - `data:`\n *\n * `<origin>` must contain only alphanumeric or any of the following: `-.:`.\n * Remember that, as per the documentation for TrustedResourceUrl, the origin\n * must be trustworthy. An origin of \"example.com\" could be set with this\n * method, but would tie the security of your site to the security of\n * example.com. Similarly, formats that potentially cover redirects hosted\n * on a trusted origin are problematic, since that could lead to untrusted\n * origins.\n *\n * `<pathStart>` is either an empty string, or a non empty string that does not\n * start with '/' or '\\'.\n * In other words, `/<pathStart>` is either a '/' or a\n * '/' followed by at least one character that is not '/' or '\\'.\n *\n * `data:` (data URL) does not allow embedded expressions in the template\n * literal input.\n *\n * All embedded expressions are URL encoded when they are interpolated. Do not\n * embed expressions that are already URL encoded as they will be double encoded\n * by the builder.\n *\n * @param templateObj This contains the literal part of the template literal.\n * @param rest This represents the template's embedded expressions.\n */\nexport function trustedResourceUrl(templateObj, ...rest) {\n    // Check if templateObj is actually from a template literal.\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, true, 'trustedResourceUrl is a template literal tag function and ' +\n            'can only be called as such (e.g. trustedResourceUrl`/somepath.js`)');\n    }\n    if (rest.length === 0) {\n        return createResourceUrl(templateObj[0]);\n    }\n    const base = templateObj[0].toLowerCase();\n    if (process.env.NODE_ENV !== 'production') {\n        if (/^data:/.test(base)) {\n            throw new Error('Data URLs cannot have expressions in the template literal input.');\n        }\n        if (!hasValidOrigin(base) && !isValidPathStart(base) &&\n            !isValidAboutUrl(base)) {\n            throw new Error('Trying to interpolate expressions in an unsupported url format.');\n        }\n    }\n    const urlParts = [templateObj[0]];\n    for (let i = 0; i < rest.length; i++) {\n        urlParts.push(encodeURIComponent(rest[i]));\n        urlParts.push(templateObj[i + 1]);\n    }\n    return createResourceUrl(urlParts.join(''));\n}\n/**\n * Creates a new TrustedResourceUrl with params added to the URL's search\n * parameters.\n *\n * @param params What to add to the URL. Parameters with value `null` or\n * `undefined` are skipped. Both keys and values will be encoded. Do not pass\n * pre-encoded values as this will result them being double encoded. If the\n * value is an array then the same parameter is added for every element in the\n * array.\n */\nexport function appendParams(trustedUrl, params) {\n    let url = unwrapResourceUrl(trustedUrl).toString();\n    if (/#/.test(url)) {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = `Found a hash in url (${url}), appending not supported`;\n        }\n        throw new Error(message);\n    }\n    let separator = /\\?/.test(url) ? '&' : '?';\n    // for-of has a big polyfill.\n    // tslint:disable-next-line:ban-iterable-foreach\n    params.forEach((value, key) => {\n        const values = (value instanceof Array) ? value : [value];\n        for (let i = 0; i < values.length; i++) {\n            const v = values[i];\n            if (v === null || v === undefined) {\n                continue;\n            }\n            url += separator + encodeURIComponent(key) + '=' +\n                encodeURIComponent(String(v));\n            separator = '&';\n        }\n    });\n    return createResourceUrl(url);\n}\nconst BEFORE_FRAGMENT_REGEXP = /[^#]*/;\n/**\n * Creates a new TrustedResourceUrl based on an existing one but with the\n * addition of a fragment (the part after `#`). If the URL already has a\n * fragment, it is replaced with the new one.\n * @param fragment The fragment to add to the URL, verbatim, without the leading\n * `#`. No additional escaping is applied.\n */\nexport function replaceFragment(trustedUrl, fragment) {\n    const urlString = unwrapResourceUrl(trustedUrl).toString();\n    return createResourceUrl(BEFORE_FRAGMENT_REGEXP.exec(urlString)[0] + '#' + fragment);\n}\n/**\n * Creates a `TrustedResourceUrl` by generating a `Blob` from a\n * `SafeScript` and then calling `URL.createObjectURL` with that `Blob`.\n *\n * Caller must call `URL.revokeObjectUrl()` on the stringified url to\n * release the underlying `Blob`.\n */\nexport function blobUrlFromScript(safeScript) {\n    const scriptContent = unwrapScript(safeScript).toString();\n    const blob = new Blob([scriptContent], { type: 'text/javascript' });\n    return createResourceUrl(URL.createObjectURL(blob));\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { createScript, unwrapScript } from '../internals/script_impl';\nimport { assertIsTemplateObject } from '../internals/string_literal';\n/**\n * Creates a SafeScript object from a template literal (without any embedded\n * expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                           safeScript`foo`;\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeScript(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, false, 'safeScript is a template literal tag function ' +\n            'that only accepts template literals without expressions. ' +\n            'For example, safeScript`foo`;');\n    }\n    return createScript(templateObj[0]);\n}\n/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */\nexport function concatScripts(scripts) {\n    return createScript(scripts.map(unwrapScript).join(''));\n}\n/**\n * Converts a serializable value into JSON that is safe to interpolate into a\n * script context. In particular it escapes < characters so that a value of\n * \"</script>\" doesn't break out of the context.\n * @param value The value to serialize.\n */\nexport function scriptFromJson(value) {\n    return createScript(JSON.stringify(value).replace(/</g, '\\\\x3c'));\n}\n/**\n * Creates a `SafeScript` object from a template literal (without any embedded\n * expressions) along with additional arguments that the script should have\n * access to. These arguments will be JSON-encoded and passed to the script as\n * a function call.\n * @example\n * ```ts\n * safeScriptWithArgs`function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * }`('Bob', { 'age': 42 })\n * ```\n * would return a `SafeScript` that represents the following code:\n * ```js\n * (function (name, props) {\n *  console.log(name + ' is ' + props.age);\n * })(\"Bob\",{\"age\":42})\n * ```\n * @note Be careful when passing objects as arguments, as unquoted property\n * names may be changed during compilation.\n * @param templateObj This contains the literal part of the template literal.\n * @param emptyArgs Expressions that evaluate to the empty string to enable\n *     inline comments.\n */\nexport function safeScriptWithArgs(templateObj, ...emptyArgs) {\n    if (process.env.NODE_ENV !== 'production') {\n        if (emptyArgs.some(a => a !== '')) {\n            throw new Error('safeScriptWithArgs only allows empty string expressions ' +\n                'to enable inline comments.');\n        }\n        assertIsTemplateObject(templateObj, true, 'safeScriptWithArgs is a template literal tag function ' +\n            'that only accepts template literals. ' +\n            'For example, safeScriptWithArgs`foo`;');\n    }\n    return (...argValues) => {\n        const values = argValues.map((v) => scriptFromJson(v).toString());\n        return createScript(`(${templateObj.join('')})(${values.join(',')})`);\n    };\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { assertIsTemplateObject } from '../internals/string_literal';\nimport { createStyle, unwrapStyle } from '../internals/style_impl';\n/**\n * Creates a SafeStyle object from a template literal (without any embedded\n * expressions).\n *\n * ` style` should be in the format\n * ` name: value; [name: value; ...]` and must not have any < or >\n * characters in it. This is so that SafeStyle's contract is preserved,\n * allowing the SafeStyle to correctly be interpreted as a sequence of CSS\n * declarations and without affecting the syntactic structure of any\n * surrounding CSS and HTML.\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                          safeStyle`foo`;\n * This function first checks if it is called with a literal template, and\n * then performs basic sanity checks on the format of ` style`\n * but does not constrain the format of ` name} and {@code value`, except\n * for disallowing tag characters.\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeStyle(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, false, 'safeStyle is a template literal tag function ' +\n            'that only accepts template literals without expressions. ' +\n            'For example, safeStyle`foo`;');\n    }\n    const style = templateObj[0];\n    if (process.env.NODE_ENV !== 'production') {\n        if (/[<>]/.test(style)) {\n            throw new Error('Forbidden characters in style string: ' + style);\n        }\n        if (!/;$/.test(style)) {\n            throw new Error('Style string does not end with \";\": ' + style);\n        }\n        if (!/:/.test(style)) {\n            throw new Error('Style string should contain one or more \":\": ' + style);\n        }\n    }\n    return createStyle(style);\n}\n/** Creates a `SafeStyle` value by concatenating multiple `SafeStyle`s. */\nexport function concatStyles(styles) {\n    return createStyle(styles.map(unwrapStyle).join(''));\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { ensureTokenIsValid, secretToken } from './secrets';\n/**\n * A complete CSS style sheet, safe to use in style contexts in an HTML document\n * or DOM APIs.\n */\nexport class SafeStyleSheet {\n    // @ts-ignore: error TS6133: 'brand' is declared but its value is never read.\n    brand; // To prevent structural typing.\n}\n/** Implementation for `SafeStyleSheet` */\nclass StyleSheetImpl extends SafeStyleSheet {\n    privateDoNotAccessOrElseWrappedStyleSheet;\n    constructor(styleSheet, token) {\n        super();\n        if (process.env.NODE_ENV !== 'production') {\n            ensureTokenIsValid(token);\n        }\n        this.privateDoNotAccessOrElseWrappedStyleSheet = styleSheet;\n    }\n    toString() {\n        return this.privateDoNotAccessOrElseWrappedStyleSheet;\n    }\n}\n/**\n * Builds a new `SafeStyleSheet` from the given string, without enforcing\n * safety guarantees. This shouldn't be exposed to application developers, and\n * must only be used as a step towards safe builders or safe constants.\n */\nexport function createStyleSheet(styleSheet) {\n    return new StyleSheetImpl(styleSheet, secretToken);\n}\n/**\n * Checks if the given value is a `SafeStyleSheet` instance.\n */\nexport function isStyleSheet(value) {\n    return value instanceof StyleSheetImpl;\n}\n/**\n * Returns the string value of the passed `SafeStyleSheet` object while\n * ensuring it has the correct type.\n */\nexport function unwrapStyleSheet(value) {\n    if (value instanceof StyleSheetImpl) {\n        return value.privateDoNotAccessOrElseWrappedStyleSheet;\n    }\n    else {\n        let message = '';\n        if (process.env.NODE_ENV !== 'production') {\n            message = 'Unexpected type when unwrapping SafeStyleSheet';\n        }\n        throw new Error(message);\n    }\n}\n","/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nimport '../environment/dev';\nimport { assertIsTemplateObject } from '../internals/string_literal';\nimport { createStyleSheet, unwrapStyleSheet } from '../internals/style_sheet_impl';\n/**\n * Creates a SafeStyleSheet object from a template literal (without any\n * embedded expressions).\n *\n * This function is a template literal tag function. It should be called with\n * a template literal that does not contain any expressions. For example,\n *                         safeStyleSheet`foo`;\n * The argument must not have any < or > characters in it. This is so that\n * SafeStyleSheet's contract is preserved, allowing the SafeStyleSheet to\n * correctly be interpreted as a sequence of CSS declarations and without\n * affecting the syntactic structure of any surrounding CSS and HTML.\n *\n * @param templateObj This contains the literal part of the template literal.\n */\nexport function safeStyleSheet(templateObj) {\n    if (process.env.NODE_ENV !== 'production') {\n        assertIsTemplateObject(templateObj, false, 'safeStyleSheet is a template literal tag ' +\n            'function that only accepts template literals without ' +\n            'expressions. For example, safeStyleSheet`foo`;');\n    }\n    const styleSheet = templateObj[0];\n    if (process.env.NODE_ENV !== 'production') {\n        if (/[<>]/.test(styleSheet)) {\n            throw new Error('Forbidden characters in styleSheet string: ' + styleSheet);\n        }\n    }\n    return createStyleSheet(styleSheet);\n}\n/**\n * Creates a `SafeStyleSheet` value by concatenating multiple `SafeStyleSheet`s.\n */\nexport function concatStyleSheets(sheets) {\n    return createStyleSheet(sheets.map(unwrapStyleSheet).join(''));\n}\n","\"use strict\";\n/**\n * @license\n * SPDX-License-Identifier: Apache-2.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.unwrapStyleSheet = exports.SafeStyleSheet = exports.isStyleSheet = exports.unwrapStyle = exports.SafeStyle = exports.isStyle = exports.unwrapScript = exports.SafeScript = exports.isScript = exports.EMPTY_SCRIPT = exports.unwrapResourceUrl = exports.TrustedResourceUrl = exports.isResourceUrl = exports.unwrapHtml = exports.SafeHtml = exports.isHtml = exports.EMPTY_HTML = exports.unwrapAttributePrefix = exports.SafeAttributePrefix = exports.safeStyleSheet = exports.concatStyleSheets = exports.safeStyle = exports.concatStyles = exports.scriptFromJson = exports.safeScriptWithArgs = exports.safeScript = exports.concatScripts = exports.trustedResourceUrl = exports.replaceFragment = exports.blobUrlFromScript = exports.appendParams = exports.HtmlSanitizerBuilder = exports.sanitizeHtmlToFragment = exports.sanitizeHtmlAssertUnchanged = exports.sanitizeHtml = exports.htmlEscape = exports.createScriptSrc = exports.createScript = exports.concatHtmls = exports.safeAttrPrefix = void 0;\n/** Safe builders */\nvar attribute_builders_1 = require(\"./builders/attribute_builders\");\nObject.defineProperty(exports, \"safeAttrPrefix\", { enumerable: true, get: function () { return attribute_builders_1.safeAttrPrefix; } });\nvar html_builders_1 = require(\"./builders/html_builders\");\nObject.defineProperty(exports, \"concatHtmls\", { enumerable: true, get: function () { return html_builders_1.concatHtmls; } });\nObject.defineProperty(exports, \"createScript\", { enumerable: true, get: function () { return html_builders_1.createScript; } });\nObject.defineProperty(exports, \"createScriptSrc\", { enumerable: true, get: function () { return html_builders_1.createScriptSrc; } });\nObject.defineProperty(exports, \"htmlEscape\", { enumerable: true, get: function () { return html_builders_1.htmlEscape; } });\nvar html_sanitizer_1 = require(\"./builders/html_sanitizer/html_sanitizer\");\nObject.defineProperty(exports, \"sanitizeHtml\", { enumerable: true, get: function () { return html_sanitizer_1.sanitizeHtml; } });\nObject.defineProperty(exports, \"sanitizeHtmlAssertUnchanged\", { enumerable: true, get: function () { return html_sanitizer_1.sanitizeHtmlAssertUnchanged; } });\nObject.defineProperty(exports, \"sanitizeHtmlToFragment\", { enumerable: true, get: function () { return html_sanitizer_1.sanitizeHtmlToFragment; } });\nvar html_sanitizer_builder_1 = require(\"./builders/html_sanitizer/html_sanitizer_builder\");\nObject.defineProperty(exports, \"HtmlSanitizerBuilder\", { enumerable: true, get: function () { return html_sanitizer_builder_1.HtmlSanitizerBuilder; } });\nvar resource_url_builders_1 = require(\"./builders/resource_url_builders\");\nObject.defineProperty(exports, \"appendParams\", { enumerable: true, get: function () { return resource_url_builders_1.appendParams; } });\nObject.defineProperty(exports, \"blobUrlFromScript\", { enumerable: true, get: function () { return resource_url_builders_1.blobUrlFromScript; } });\nObject.defineProperty(exports, \"replaceFragment\", { enumerable: true, get: function () { return resource_url_builders_1.replaceFragment; } });\nObject.defineProperty(exports, \"trustedResourceUrl\", { enumerable: true, get: function () { return resource_url_builders_1.trustedResourceUrl; } });\nvar script_builders_1 = require(\"./builders/script_builders\");\nObject.defineProperty(exports, \"concatScripts\", { enumerable: true, get: function () { return script_builders_1.concatScripts; } });\nObject.defineProperty(exports, \"safeScript\", { enumerable: true, get: function () { return script_builders_1.safeScript; } });\nObject.defineProperty(exports, \"safeScriptWithArgs\", { enumerable: true, get: function () { return script_builders_1.safeScriptWithArgs; } });\nObject.defineProperty(exports, \"scriptFromJson\", { enumerable: true, get: function () { return script_builders_1.scriptFromJson; } });\nvar style_builders_1 = require(\"./builders/style_builders\");\nObject.defineProperty(exports, \"concatStyles\", { enumerable: true, get: function () { return style_builders_1.concatStyles; } });\nObject.defineProperty(exports, \"safeStyle\", { enumerable: true, get: function () { return style_builders_1.safeStyle; } });\nvar style_sheet_builders_1 = require(\"./builders/style_sheet_builders\");\nObject.defineProperty(exports, \"concatStyleSheets\", { enumerable: true, get: function () { return style_sheet_builders_1.concatStyleSheets; } });\nObject.defineProperty(exports, \"safeStyleSheet\", { enumerable: true, get: function () { return style_sheet_builders_1.safeStyleSheet; } });\n/** Types, constants and unwrappers */\nvar attribute_impl_1 = require(\"./internals/attribute_impl\");\nObject.defineProperty(exports, \"SafeAttributePrefix\", { enumerable: true, get: function () { return attribute_impl_1.SafeAttributePrefix; } });\nObject.defineProperty(exports, \"unwrapAttributePrefix\", { enumerable: true, get: function () { return attribute_impl_1.unwrapAttributePrefix; } });\nvar html_impl_1 = require(\"./internals/html_impl\");\nObject.defineProperty(exports, \"EMPTY_HTML\", { enumerable: true, get: function () { return html_impl_1.EMPTY_HTML; } });\nObject.defineProperty(exports, \"isHtml\", { enumerable: true, get: function () { return html_impl_1.isHtml; } });\nObject.defineProperty(exports, \"SafeHtml\", { enumerable: true, get: function () { return html_impl_1.SafeHtml; } });\nObject.defineProperty(exports, \"unwrapHtml\", { enumerable: true, get: function () { return html_impl_1.unwrapHtml; } });\nvar resource_url_impl_1 = require(\"./internals/resource_url_impl\");\nObject.defineProperty(exports, \"isResourceUrl\", { enumerable: true, get: function () { return resource_url_impl_1.isResourceUrl; } });\nObject.defineProperty(exports, \"TrustedResourceUrl\", { enumerable: true, get: function () { return resource_url_impl_1.TrustedResourceUrl; } });\nObject.defineProperty(exports, \"unwrapResourceUrl\", { enumerable: true, get: function () { return resource_url_impl_1.unwrapResourceUrl; } });\nvar script_impl_1 = require(\"./internals/script_impl\");\nObject.defineProperty(exports, \"EMPTY_SCRIPT\", { enumerable: true, get: function () { return script_impl_1.EMPTY_SCRIPT; } });\nObject.defineProperty(exports, \"isScript\", { enumerable: true, get: function () { return script_impl_1.isScript; } });\nObject.defineProperty(exports, \"SafeScript\", { enumerable: true, get: function () { return script_impl_1.SafeScript; } });\nObject.defineProperty(exports, \"unwrapScript\", { enumerable: true, get: function () { return script_impl_1.unwrapScript; } });\nvar style_impl_1 = require(\"./internals/style_impl\");\nObject.defineProperty(exports, \"isStyle\", { enumerable: true, get: function () { return style_impl_1.isStyle; } });\nObject.defineProperty(exports, \"SafeStyle\", { enumerable: true, get: function () { return style_impl_1.SafeStyle; } });\nObject.defineProperty(exports, \"unwrapStyle\", { enumerable: true, get: function () { return style_impl_1.unwrapStyle; } });\nvar style_sheet_impl_1 = require(\"./internals/style_sheet_impl\");\nObject.defineProperty(exports, \"isStyleSheet\", { enumerable: true, get: function () { return style_sheet_impl_1.isStyleSheet; } });\nObject.defineProperty(exports, \"SafeStyleSheet\", { enumerable: true, get: function () { return style_sheet_impl_1.SafeStyleSheet; } });\nObject.defineProperty(exports, \"unwrapStyleSheet\", { enumerable: true, get: function () { return style_sheet_impl_1.unwrapStyleSheet; } });\n"],"names":["secretToken","ensureTokenIsValid","token","SafeAttributePrefix","__publicField","AttributePrefixImpl","attrPrefix","createAttributePrefix","unwrapAttributePrefix","value","message","safeAttrPrefix","templ","trustedTypesPolicyName","trustedTypes","getTrustedTypes","trustedTypesPolicy","getTrustedTypesPolicy","_a","s","HtmlImpl","html","createHtmlInternal","trusted","GlobalTrustedHTML","SafeHtml","createHtml","noinlineHtml","EMPTY_HTML","isHtml","unwrapHtml","ResourceUrlImpl","url","GlobalTrustedScriptURL","TrustedResourceUrl","createResourceUrl","noinlineUrl","isResourceUrl","unwrapResourceUrl","ScriptImpl","script","createScriptInternal","GlobalTrustedScript","SafeScript","createScript","noinlineScript","EMPTY_SCRIPT","isScript","unwrapScript","htmlEscape","text","options","htmlEscapedString","htmlEscapeToString","unwrappedScript","stringTag","createScriptSrc","src","async","nonce","unwrappedSrc","concatHtmls","htmls","extractScheme","parsedUrl","ALLOWED_SCHEMES","restrictivelySanitizeUrl","parsedScheme","SafeStyle","StyleImpl","style","createStyle","isStyle","unwrapStyle","setInnerHtml","elOrRoot","v","isElement","throwIfScriptOrStyle","setPrefixedAttribute","attrPrefixes","e","attr","prefixes","attrLower","p","element","createInertFragment","dirtyHtml","template","temporarySafeHtml","getNodeName","node","nodeName","isText","nodeType","SanitizerTable","allowedElements","elementPolicies","allowedGlobalAttributes","globalAttributePolicies","elementName","attributeName","elementPolicy","AttributePolicyAction","defaultSanitizerTable","HtmlSanitizerImpl","sanitizerTable","sanitizedHtml","fakeRoot","serializedNewTree","dirtyFragment","treeWalker","n","currentNode","sanitizedFragment","sanitizedParent","sanitizedNode","textNode","elementNode","newNode","dirtyAttributes","name","policy","sanitizedAttrUrl","checkExhaustive","errorMessage","conditions","attrs","attrName","expectedValues","defaultHtmlSanitizer","sanitizeHtml","sanitizeHtmlAssertUnchanged","sanitizeHtmlToFragment","msg","HtmlSanitizerBuilder","elementSet","allowedElementPolicies","attributeSet","attribute","originalElementPolicy","newElementPolicy","attributePolicy","attributes","trustedResourceUrl","templateObj","rest","urlParts","i","appendParams","trustedUrl","params","separator","key","values","BEFORE_FRAGMENT_REGEXP","replaceFragment","fragment","urlString","blobUrlFromScript","safeScript","scriptContent","blob","concatScripts","scripts","scriptFromJson","safeScriptWithArgs","emptyArgs","argValues","safeStyle","concatStyles","styles","SafeStyleSheet","StyleSheetImpl","styleSheet","createStyleSheet","isStyleSheet","unwrapStyleSheet","safeStyleSheet","concatStyleSheets","sheets","exports","attribute_builders_1","require$$0","html_builders_1","require$$1","html_sanitizer_1","require$$2","html_sanitizer_builder_1","require$$3","resource_url_builders_1","require$$4","script_builders_1","require$$5","style_builders_1","require$$6","style_sheet_builders_1","require$$7","attribute_impl_1","require$$8","html_impl_1","require$$9","resource_url_impl_1","require$$10","script_impl_1","require$$11","style_impl_1","require$$12","style_sheet_impl_1","require$$13"],"mappings":"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D,CACI,OAAQ,IAAI,IAAI,CACZ,CAAC,OAAQ,CAAE,aAAcA,EAAsB,qBAAqB,CAAE,CAClF,CAAS,CACJ,EACD,CACI,OAAQ,IAAI,IAAI,CACZ,CACI,OAAQ,CACJ,aAAcA,EAAsB,sBACpC,WAAY,IAAI,IAAI,CAAC,CACb,MAAO,IAAI,IAAI,CACX,YACA,SACA,WACA,YACA,OACA,OACA,OACA,UACA,OACA,WACA,eACA,YACA,aACA,UACA,OACA,SACA,aAChC,CAA6B,CAC7B,CAAyB,CAAC,CACT,CACJ,CACb,CAAS,CACJ,EACD,CACI,SAAU,IAAI,IAAI,CACd,CAAC,MAAO,CAAE,aAAcA,EAAsB,qBAAqB,CAAE,CACjF,CAAS,CACJ,EACD,CACI,MAAO,IAAI,IAAI,CACX,CAAC,MAAO,CAAE,aAAcA,EAAsB,qBAAqB,CAAE,CACjF,CAAS,CACJ,EACD,CACI,QAAS,IAAI,IAAI,CACb,CAAC,MAAO,CAAE,aAAcA,EAAsB,qBAAqB,CAAE,CACjF,CAAS,CACJ,EACD,CACI,QAAS,IAAI,IAAI,CACb,CAAC,MAAO,CAAE,aAAcA,EAAsB,qBAAqB,CAAE,CACjF,CAAS,CACJ,CACL,CAAC,EAAG,IAAI,IAAI,CACR,QACA,cACA,oBACA,YACA,eACA,eACA,gBACA,kBACA,gBACA,gBACA,cACA,eACA,aACA,aACA,YACA,iBACA,uBACA,mBACA,gBACA,eACA,gBACA,gBACA,gBACA,gBACA,eACA,YACA,gBACA,gBACA,gBACA,iBACA,MACA,QACA,iBACA,eACA,cACA,YACA,WACA,UACA,SACA,cACA,cACA,UACA,QACA,OACA,UACA,WACA,WACA,WACA,WACA,YACA,UACA,OACA,cACA,cACA,SACA,WACA,SACA,QACA,QACA,OACA,OACA,MACA,YACA,QACA,YACA,MACA,WACA,QACA,QACA,OACA,cACA,UACA,MACA,WACA,WACA,OACA,OACA,UACA,WACA,QACA,OACA,QACA,OACA,OACA,aACA,QACA,OACA,UACA,YACA,OACA,SACA,QACA,QACA,OACA,YACA,WACA,SACA,WA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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}
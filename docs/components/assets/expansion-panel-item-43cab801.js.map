{"version":3,"file":"expansion-panel-item-43cab801.js","sources":["../../../../libs/components/src/expansion-panel/expansion-panel.ts","../../../../libs/components/src/expansion-panel/expansion-panel-item.ts"],"sourcesContent":["import { LitElement, html } from 'lit';\nimport {\n  customElement,\n  property,\n  queryAssignedElements,\n} from 'lit/decorators.js';\nimport { CovalentExpansionPanelItem } from './expansion-panel-item';\n\n@customElement('cv-expansion-panel')\nexport class CovalentExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) noSurface = false;\n  @property({ type: String }) titleWidth = '150px';\n  @queryAssignedElements() panelItems!: CovalentExpansionPanelItem[];\n\n  render() {\n    return html`\n      <div class=\"container\">\n        <div class=\"content\">\n          <slot id=\"mainSlot\"></slot>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleToggle = (e: CustomEvent): void => {\n    const toggledPanelIndex = e.detail.index;\n    const panel = this.panelItems[toggledPanelIndex];\n    const open = panel.open;\n\n    // close the currently open panel if there is one\n    this.panelItems.forEach((item) => {\n      item.resetPanel();\n    });\n\n    if (open) {\n      panel.open = true;\n      this.panelItems.forEach((item) => {\n        // Format the panel above and below the opened panel\n        if (item.index == toggledPanelIndex - 1) {\n          if (item.index == 0) {\n            // if this is the top panel\n            item.separateSinglePanel = true;\n          } else {\n            item.aboveOpenInnerPanel = true;\n          }\n        } else if (item.index == toggledPanelIndex + 1) {\n          if (item.index == this.panelItems.length - 1) {\n            item.separateSinglePanel = true;\n          }\n          item.belowOpenInnerPanel = true;\n        }\n      });\n    }\n  };\n\n  firstUpdated() {\n    window.addEventListener('cv-expansionPanel-togglePanel', (e) =>\n      this._handleToggle(<CustomEvent>e)\n    );\n\n    this.style.setProperty(\n      '--cv-expansion-panel-item-title-width',\n      this.titleWidth\n    );\n\n    if (this.noSurface) {\n      this.style.setProperty('--mdc-theme-surface', 'transparent');\n    }\n\n    if (this.panelItems.length == 1) {\n      this.panelItems[0].isSinglePanel = true;\n    } else {\n      // set index and type of each panel\n      let i = 0;\n      this.panelItems.forEach((item) => {\n        if (i == 0) {\n          item.isTopPanel = true;\n        } else if (i == this.panelItems.length - 1) {\n          item.isBottomPanel = true;\n        } else {\n          item.isInnerPanel = true;\n        }\n        item.index = i;\n        i++;\n      });\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cv-expansion-panel': CovalentExpansionPanel;\n  }\n}\n","import { LitElement, css, html, unsafeCSS } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport styles from './expansion-panel-item.scss?inline';\nimport '../icon/icon';\n\n@customElement('cv-expansion-panel-item')\nexport class CovalentExpansionPanelItem extends LitElement {\n  static override styles = [\n    css`\n      ${unsafeCSS(styles)}\n    `,\n  ];\n\n  @property({ type: Number }) index = 0;\n\n  @property({ type: Boolean, reflect: true, attribute: 'open' }) open = false;\n  @property({ type: Boolean, reflect: true, attribute: 'isTopPanel' })\n  isTopPanel = false;\n  @property({ type: Boolean, reflect: true, attribute: 'isInnerPanel' })\n  isInnerPanel = false;\n  @property({ type: Boolean, reflect: true, attribute: 'isBottomPanel' })\n  isBottomPanel = false;\n  @property({ type: Boolean, reflect: true, attribute: 'isSinglePanel' })\n  isSinglePanel = false;\n\n  @property({ type: Boolean, reflect: true, attribute: 'belowOpenInnerPanel' })\n  belowOpenInnerPanel = false;\n  @property({ type: Boolean, reflect: true, attribute: 'aboveOpenInnerPanel' })\n  aboveOpenInnerPanel = false;\n  // if the panel right below the top panel or right above the bottom panel is opened,\n  // the very top or bottom panel becomes a single panel\n  @property({ type: Boolean, reflect: true, attribute: 'separateSinglePanel' })\n  separateSinglePanel = false;\n\n  @property({ type: String }) title = 'Title';\n  @property({ type: String }) contentPreview = '';\n  @property({ type: Boolean, reflect: true }) showFooter = false;\n  @property({ type: Boolean, reflect: true }) noSurface = false;\n\n  render() {\n    return html`\n      <div class=\"panel\">\n        <div class=\"header\" @click=${this._toggleContent}>\n          <span class=\"title\">${this.title}</span>\n          <span class=\"contentPreview\">${this.contentPreview}</span>\n\n          <cv-icon class=\"closedIcon\">expand_more</cv-icon>\n          <cv-icon class=\"openedIcon\">expand_less</cv-icon>\n        </div>\n\n        <div class=\"dropdown\">\n          <div class=\"content\">\n            <slot name=\"content\"></slot>\n            ${this.showFooter\n              ? html`\n                  <div class=\"footer\">\n                    <slot name=\"footer\"></slot>\n                  </div>\n                `\n              : ''}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  resetPanel() {\n    this.belowOpenInnerPanel = false;\n    this.aboveOpenInnerPanel = false;\n    this.separateSinglePanel = false;\n    this.open = false;\n  }\n\n  private _toggleContent() {\n    this.open = !this.open;\n\n    const event = new CustomEvent('cv-expansionPanel-togglePanel', {\n      detail: {\n        message: `Panel opened: ${this}`,\n        bubbles: true,\n        composed: true,\n        open: this.open,\n        index: this.index,\n      },\n    });\n    window.dispatchEvent(event);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cv-expansion-panel-item': CovalentExpansionPanelItem;\n  }\n}\n"],"names":["CovalentExpansionPanel","LitElement","e","toggledPanelIndex","panel","open","item","html","i","__decorateClass","property","queryAssignedElements","customElement","CovalentExpansionPanelItem","event","css","unsafeCSS","styles"],"mappings":"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"}
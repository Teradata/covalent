@use '@material/button';

@mixin button-theme($theme) {
  --mdc-theme-error: #{map-get($theme, error)};

  // --- web component --- //

  // --- set default to neutral --- //
  td-button {
    --mdc-button-outline-color: #{map-get($theme, text-icon-on-background)};
    --mdc-theme-primary: #{map-get($theme, text-primary-on-background)};
  }

  // --- apply accent color --- //
  td-button.accent.primary {
    --mdc-theme-primary: #{map-get($theme, primary)};
    --mdc-button-outline-color: var(--mdc-theme-primary);
  }

  // --- apply error color --- //
  td-button.destructive.primary {
    --mdc-theme-primary: var(--mdc-theme-error);
    --mdc-button-outline-color: var(--mdc-theme-error);
  }

  // --- non-web component --- //

  .mdc-button:not(:disabled) {
    --mdc-button-outline-color: #{map-get($theme, text-icon-on-background)};
    --mdc-theme-primary: #{map-get($theme, text-primary-on-background)};
    @include button.outline-color(map-get($theme, text-icon-on-background));

    &.accent {
      --mdc-theme-primary: #{map-get($theme, primary)};
      --mdc-button-outline-color: var(--mdc-theme-primary);

      border-color: var(--mdc-button-outline-color);
    }

    &.destructive,
    &.negative {
      --mdc-theme-primary: #{map-get($theme, error)};
      --mdc-button-outline-color: var(--mdc-theme-primary);

      border-color: var(--mdc-button-outline-color);
    }
  }
}
